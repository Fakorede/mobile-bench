--- a/app/src/main/java/de/danoeh/antennapod/ui/swipeactions/RemoveFromHistorySwipeAction.java
+++ b/app/src/main/java/de/danoeh/antennapod/ui/swipeactions/RemoveFromHistorySwipeAction.java
@@ -38,10 +38,11 @@
 
     @Override
     public void performAction(FeedItem item, Fragment fragment, FeedItemFilter filter) {
-        Date playbackCompletionDate = item.getMedia().getPlaybackCompletionDate();
+        Date lastPlayedTimeHistory = item.getMedia().getLastPlayedTimeHistory();
         DBWriter.deleteFromPlaybackHistory(item);
         EventBus.getDefault().post(new MessageEvent(fragment.getString(R.string.removed_history_label),
-                context -> DBWriter.addItemToPlaybackHistory(item.getMedia(), playbackCompletionDate),
+                context -> DBWriter.addItemToPlaybackHistory(item.getMedia(), lastPlayedTimeHistory),
                 fragment.getString(R.string.undo)));
     }
 
--- a/model/src/main/java/de/danoeh/antennapod/model/feed/FeedItemFilter.java
+++ b/model/src/main/java/de/danoeh/antennapod/model/feed/FeedItemFilter.java
@@ -119,8 +119,7 @@
             return false;
         } else if (showNotFavorite && item.isTagged(FeedItem.TAG_FAVORITE)) {
             return false;
-        } else if (showInHistory && item.getMedia() != null
-                && item.getMedia().getPlaybackCompletionDate().getTime() == 0) {
+        } else if (showInHistory && item.getMedia() != null && item.getMedia().getLastPlayedTimeHistory() == null) {
             return false;
         } else if (!includeNotSubscribed && item.getFeed() != null
                 && item.getFeed().getState() != Feed.STATE_SUBSCRIBED) {
--- a/model/src/main/java/de/danoeh/antennapod/model/feed/FeedMedia.java
+++ b/model/src/main/java/de/danoeh/antennapod/model/feed/FeedMedia.java
@@ -46,7 +46,7 @@
     private int playedDuration; // How many ms of this file have been played
     private long size; // File size in Byte
     private String mimeType;
-    @Nullable private volatile FeedItem item;
+    @Nullable private FeedItem item;
     private Date playbackCompletionDate;
     private int startPosition = -1;
     private int playedDurationWhenStarted;
@@ -70,7 +70,7 @@
     public FeedMedia(long id, FeedItem item, int duration, int position,
                      long size, String mimeType, String localFileUrl, String downloadUrl,
                      long downloadDate, Date playbackCompletionDate, int playedDuration,
-                     long lastPlayedTime) {
+                     long lastPlayedTime, Date lastPlayedTimeHistory) {
         this.localFileUrl = localFileUrl;
         this.downloadUrl = downloadUrl;
         this.downloadDate = downloadDate;
@@ -82,15 +82,15 @@
         this.playedDuration = playedDuration;
         this.playedDurationWhenStarted = playedDuration;
         this.size = size;
         this.mimeType = mimeType;
-        this.playbackCompletionDate = playbackCompletionDate == null
-                ? null : (Date) playbackCompletionDate.clone();
+        this.playbackCompletionDate = lastPlayedTimeHistory == null ? null : (Date) lastPlayedTimeHistory.clone();
         this.lastPlayedTime = lastPlayedTime;
     }
 
     public FeedMedia(long id, FeedItem item, int duration, int position,
                      long size, String mimeType, String localFileUrl, String downloadUrl,
                      long downloadDate, Date playbackCompletionDate, int playedDuration,
-                     Boolean hasEmbeddedPicture, long lastPlayedTime) {
-        this(id, item, duration, position, size, mimeType, localFileUrl, downloadUrl, downloadDate,
-                playbackCompletionDate, playedDuration, lastPlayedTime);
+                     Boolean hasEmbeddedPicture, long lastPlayedTime, Date lastPlayedTimeHistory) {
+        this(id, item, duration, position, size, mimeType, localFileUrl, downloadUrl, downloadDate,
+                playbackCompletionDate, playedDuration, lastPlayedTime, lastPlayedTimeHistory);
         this.hasEmbeddedPicture = hasEmbeddedPicture;
     }
 
@@ -263,12 +263,16 @@
         }
     }
 
-    public Date getPlaybackCompletionDate() {
+    public Date getLastPlayedTimeHistory() {
         return playbackCompletionDate == null
                 ? null : (Date) playbackCompletionDate.clone();
     }
 
-    public void setPlaybackCompletionDate(Date playbackCompletionDate) {
+    /**
+     * This field is used to store the last played time for history purposes.
+     * It is not necessarily the completion date.
+     */
+    public void setLastPlayedTimeHistory(Date playbackCompletionDate) {
         this.playbackCompletionDate = playbackCompletionDate == null
                 ? null : (Date) playbackCompletionDate.clone();
     }
@@ -293,7 +297,7 @@
         dest.writeString(localFileUrl);
         dest.writeString(downloadUrl);
         dest.writeLong(downloadDate);
-        dest.writeLong((playbackCompletionDate != null) ? playbackCompletionDate.getTime() : 0);
+        dest.writeLong((playbackCompletionDate != null) ? playbackCompletionDate.getTime() : 0); // lastPlayedTimeHistory
         dest.writeInt(playedDuration);
         dest.writeLong(lastPlayedTime);
     }
@@ -362,7 +366,7 @@
         public FeedMedia createFromParcel(Parcel in) {
             final long id = in.readLong();
             final long itemID = in.readLong();
-            FeedMedia result = new FeedMedia(id, null, in.readInt(), in.readInt(), in.readLong(), in.readString(),
-                    in.readString(), in.readString(), in.readLong(), new Date(in.readLong()),
-                    in.readInt(), in.readLong());
+            FeedMedia result = new FeedMedia(id, null, in.readInt(), in.readInt(), in.readLong(), in.readString(), in.readString(),
+                    in.readString(), in.readLong(), new Date(in.readLong()), in.readInt(), in.readLong(),
+                    new Date(in.readLong()));
             result.itemID = itemID;
             return result;
         }
--- a/net/download/service/src/main/java/de/danoeh/antennapod/net/download/service/episode/autodownload/APCleanupAlgorithm.java
+++ b/net/download/service/src/main/java/de/danoeh/antennapod/net/download/service/episode/autodownload/APCleanupAlgorithm.java
@@ -51,8 +51,8 @@
     public int performCleanup(Context context, int numberOfEpisodesToDelete) {
         List<FeedItem> candidates = getCandidates();
         Collections.sort(candidates, (lhs, rhs) -> {
-            Date l = lhs.getMedia().getPlaybackCompletionDate();
-            Date r = rhs.getMedia().getPlaybackCompletionDate();
+            Date l = lhs.getMedia().getLastPlayedTimeHistory();
+            Date r = rhs.getMedia().getLastPlayedTimeHistory();
 
             if (l == null) {
                 l = new Date();
@@ -108,8 +108,8 @@
                 // make sure this candidate was played at least the proper amount of days prior
                 // to now
                 if (media != null
-                        && media.getPlaybackCompletionDate() != null
-                        && media.getPlaybackCompletionDate().before(mostRecentDateForDeletion)) {
+                        && media.getLastPlayedTimeHistory() != null
+                        && media.getLastPlayedTimeHistory().before(mostRecentDateForDeletion)) {
                     candidates.add(item);
                 }
             }
--- a/playback/cast/src/play/java/de/danoeh/antennapod/playback/cast/CastPsmp.java
+++ b/playback/cast/src/play/java/de/danoeh/antennapod/playback/cast/CastPsmp.java
@@ -503,7 +503,7 @@
         if (shouldContinue || toStoppedState) {
             if (nextMedia == null) {
                 remoteMediaClient.stop();
-                // Otherwise we rely on the chromecast callback to tell us the playback has stopped.
+                // Otherwise, we rely on the chromecast callback to tell us the playback has stopped.
                 callback.onPostPlayback(currentMedia, hasEnded, wasSkipped, false);
             } else {
                 callback.onPostPlayback(currentMedia, hasEnded, wasSkipped, true);
--- a/playback/service/src/main/java/de/danoeh/antennapod/playback/service/internal/PlayableUtils.java
+++ b/playback/service/src/main/java/de/danoeh/antennapod/playback/service/internal/PlayableUtils.java
@@ -25,7 +25,7 @@
             if (media.getStartPosition() >= 0 && playable.getPosition() > media.getStartPosition()) {
                 media.setPlayedDuration(media.getPlayedDurationWhenStarted()
                         + playable.getPosition() - media.getStartPosition());
-            }
+            } else if (playable.getPosition() > 0) { // If we're playing, but not completing, add to history
+                media.setLastPlayedTimeHistory(new Date());
+            }
             DBWriter.setFeedMediaPlaybackInformation(media);
         }
     }
--- a/storage/database/src/main/java/de/danoeh/antennapod/storage/database/DBUpgrader.java
+++ b/storage/database/src/main/java/de/danoeh/antennapod/storage/database/DBUpgrader.java
@@ -358,6 +358,10 @@
             db.execSQL("ALTER TABLE " + PodDBAdapter.TABLE_NAME_FEED_ITEMS
                     + " ADD COLUMN " + PodDBAdapter.KEY_SOCIAL_INTERACT_URL + " TEXT");
             db.execSQL("DELETE FROM " + PodDBAdapter.TABLE_NAME_FAVORITES + " WHERE " + PodDBAdapter.KEY_FEEDITEM
                     + " NOT IN (SELECT " + PodDBAdapter.KEY_ID + " FROM " + PodDBAdapter.TABLE_NAME_FEED_ITEMS + ")");
         }
+        if (oldVersion < 3080001) {
+            db.execSQL("ALTER TABLE " + PodDBAdapter.TABLE_NAME_FEED_MEDIA
+                    + " ADD COLUMN " + PodDBAdapter.KEY_LAST_PLAYED_TIME_HISTORY + " INTEGER DEFAULT 0");
+        }
     }
 
 }
--- a/storage/database/src/main/java/de/danoeh/antennapod/storage/database/DBWriter.java
+++ b/storage/database/src/main/java/de/danoeh/antennapod/storage/database/DBWriter.java
@@ -279,7 +279,7 @@
     public static Future<?> addItemToPlaybackHistory(final FeedMedia media, Date date) {
         return runOnDbThread(() -> {
             Log.d(TAG, "Adding item to playback history");
-            media.setPlaybackCompletionDate(date);
+            media.setLastPlayedTimeHistory(date);
 
             PodDBAdapter adapter = PodDBAdapter.getInstance();
             adapter.open();
--- a/storage/database/src/main/java/de/danoeh/antennapod/storage/database/PodDBAdapter.java
+++ b/storage/database/src/main/java/de/danoeh/antennapod/storage/database/PodDBAdapter.java
@@ -129,6 +129,7 @@
     public static final String KEY_PODCASTINDEX_TRANSCRIPT_URL = "podcastindex_transcript_url";
     public static final String KEY_PODCASTINDEX_TRANSCRIPT_TYPE = "podcastindex_transcript_type";
 
+    public static final String KEY_LAST_PLAYED_TIME_HISTORY = "last_played_time_history";
     // Table names
     public static final String TABLE_NAME_FEEDS = "Feeds";
     public static final String TABLE_NAME_FEED_ITEMS = "FeedItems";
@@ -204,7 +205,8 @@
             + KEY_FEEDITEM + " INTEGER,"
             + KEY_PLAYED_DURATION + " INTEGER,"
             + KEY_HAS_EMBEDDED_PICTURE + " INTEGER,"
-            + KEY_LAST_PLAYED_TIME + " INTEGER" + ")";
+            + KEY_LAST_PLAYED_TIME + " INTEGER,"
+            + KEY_LAST_PLAYED_TIME_HISTORY + " INTEGER" + ")";
 
     private static final String CREATE_TABLE_DOWNLOAD_LOG = "CREATE TABLE "
             + TABLE_NAME_DOWNLOAD_LOG + " (" + TABLE_PRIMARY_KEY + KEY_FEEDFILE
@@ -300,7 +302,8 @@
             + TABLE_NAME_FEED_MEDIA + "." + KEY_FEEDITEM + ", "
             + TABLE_NAME_FEED_MEDIA + "." + KEY_PLAYED_DURATION + ", "
             + TABLE_NAME_FEED_MEDIA + "." + KEY_HAS_EMBEDDED_PICTURE + ", "
-            + TABLE_NAME_FEED_MEDIA + "." + KEY_LAST_PLAYED_TIME;
+            + TABLE_NAME_FEED_MEDIA + "." + KEY_LAST_PLAYED_TIME + ", "
+            + TABLE_NAME_FEED_MEDIA + "." + KEY_LAST_PLAYED_TIME_HISTORY;
 
     private static final String KEYS_FEED =
             TABLE_NAME_FEEDS + "." + KEY_ID + " AS " + SELECT_KEY_FEED_ID + ", "
@@ -528,10 +531,10 @@
         values.put(KEY_HAS_EMBEDDED_PICTURE, media.hasEmbeddedPicture());
         values.put(KEY_LAST_PLAYED_TIME, media.getLastPlayedTime());
 
-        if (media.getPlaybackCompletionDate() != null) {
-            values.put(KEY_PLAYBACK_COMPLETION_DATE, media.getPlaybackCompletionDate().getTime());
-        } else {
-            values.put(KEY_PLAYBACK_COMPLETION_DATE, 0);
+        if (media.getLastPlayedTimeHistory() != null) {
+            values.put(KEY_LAST_PLAYED_TIME_HISTORY, media.getLastPlayedTimeHistory().getTime());
+        } else {
+            values.put(KEY_LAST_PLAYED_TIME_HISTORY, 0);
         }
         if (media.getItem() != null) {
             values.put(KEY_FEEDITEM, media.getItem().getId());
@@ -559,7 +562,7 @@
     public void setFeedMediaPlaybackCompletionDate(FeedMedia media) {
         if (media.getId() != 0) {
             ContentValues values = new ContentValues();
-            values.put(KEY_PLAYBACK_COMPLETION_DATE, media.getPlaybackCompletionDate().getTime());
+            values.put(KEY_LAST_PLAYED_TIME_HISTORY, media.getLastPlayedTimeHistory().getTime());
             values.put(KEY_PLAYED_DURATION, media.getPlayedDuration());
             db.update(TABLE_NAME_FEED_MEDIA, values, KEY_ID + "=?",
                     new String[]{String.valueOf(media.getId())});
@@ -709,7 +712,7 @@
     }
 
     public void clearPlaybackHistory() {
-        ContentValues values = new ContentValues();
-        values.put(KEY_PLAYBACK_COMPLETION_DATE, 0);
-        db.update(TABLE_NAME_FEED_MEDIA, values, null, null);
+        db.execSQL("UPDATE " + TABLE_NAME_FEED_MEDIA + " SET " + KEY_LAST_PLAYED_TIME_HISTORY + " = 0");
+        db.execSQL("UPDATE " + TABLE_NAME_FEED_MEDIA + " SET " + KEY_PLAYED_DURATION + " = 0");
+        db.execSQL("UPDATE " + TABLE_NAME_FEED_MEDIA + " SET " + KEY_POSITION + " = 0");
     }
 
     public void clearDownloadLog() {
@@ -1220,7 +1223,7 @@
     public final Cursor getFeedStatisticsCursor(boolean includeMarkedAsPlayed, long timeFilterFrom,
                                                  long timeFilterTo, long sixMonthsAgo) {
         final String lastPlayedTime = TABLE_NAME_FEED_MEDIA + "." + KEY_LAST_PLAYED_TIME;
-        String wasStarted = TABLE_NAME_FEED_MEDIA + "." + KEY_PLAYBACK_COMPLETION_DATE + " > 0"
+        String wasStarted = TABLE_NAME_FEED_MEDIA + "." + KEY_LAST_PLAYED_TIME_HISTORY + " > 0"
                 + " AND " + TABLE_NAME_FEED_MEDIA + "." + KEY_PLAYED_DURATION + " > 0";
         if (includeMarkedAsPlayed) {
             wasStarted = "(" + wasStarted + ") OR "
--- a/storage/database/src/main/java/de/danoeh/antennapod/storage/database/mapper/FeedItemFilterQuery.java
+++ b/storage/database/src/main/java/de/danoeh/antennapod/storage/database/mapper/FeedItemFilterQuery.java
@@ -24,7 +24,7 @@
         // The keys used within this method, but explicitly combined with their table
         String keyRead = PodDBAdapter.TABLE_NAME_FEED_ITEMS + "." + PodDBAdapter.KEY_READ;
         String keyPosition = PodDBAdapter.TABLE_NAME_FEED_MEDIA + "." + PodDBAdapter.KEY_POSITION;
-        String keyCompletionDate = PodDBAdapter.TABLE_NAME_FEED_MEDIA + "." + PodDBAdapter.KEY_PLAYBACK_COMPLETION_DATE;
+        String keyLastPlayedTimeHistory = PodDBAdapter.TABLE_NAME_FEED_MEDIA + "." + PodDBAdapter.KEY_LAST_PLAYED_TIME_HISTORY;
         String keyDownloaded = PodDBAdapter.TABLE_NAME_FEED_MEDIA + "." + PodDBAdapter.KEY_DOWNLOAD_DATE;
         String keyMediaId = PodDBAdapter.TABLE_NAME_FEED_MEDIA + "." + PodDBAdapter.KEY_ID;
         String keyItemId = PodDBAdapter.TABLE_NAME_FEED_ITEMS + "." + PodDBAdapter.KEY_ID;
@@ -58,7 +58,7 @@
              statements.add(keyItemId + " IN (SELECT " + keyFeedItem + " FROM " + tableFavorites + ") ");
         } else if (filter.showNotFavorite) {
              statements.add(keyItemId + " NOT IN (SELECT " + keyFeedItem + " FROM " + tableFavorites + ") ");
         }
         if (filter.showInHistory) {
-            statements.add(keyCompletionDate + " > 0 ");
+            statements.add(keyLastPlayedTimeHistory + " > 0 ");
         }
         if (!filter.includeNotSubscribed) {
             statements.add(PodDBAdapter.SELECT_WHERE_FEED_IS_SUBSCRIBED);
--- a/storage/database/src/main/java/de/danoeh/antennapod/storage/database/mapper/FeedMediaCursor.java
+++ b/storage/database/src/main/java/de/danoeh/antennapod/storage/database/mapper/FeedMediaCursor.java
@@ -10,7 +10,7 @@
 public class FeedMediaCursor extends CursorWrapper {
     private final int indexId;
     private final int indexPlaybackCompletionDate;
-    private final int indexDuration;
+    private final int indexLastPlayedTimeHistory;
     private final int indexPosition;
     private final int indexSize;
     private final int indexMimeType;
@@ -22,7 +22,7 @@
     public FeedMediaCursor(Cursor cursor) {
         super(cursor);
         indexId = cursor.getColumnIndexOrThrow(PodDBAdapter.SELECT_KEY_MEDIA_ID);
-        indexPlaybackCompletionDate = cursor.getColumnIndexOrThrow(PodDBAdapter.KEY_PLAYBACK_COMPLETION_DATE);
+        indexLastPlayedTimeHistory = cursor.getColumnIndexOrThrow(PodDBAdapter.KEY_LAST_PLAYED_TIME_HISTORY);
         indexDuration = cursor.getColumnIndexOrThrow(PodDBAdapter.KEY_DURATION);
         indexPosition = cursor.getColumnIndexOrThrow(PodDBAdapter.KEY_POSITION);
         indexSize = cursor.getColumnIndexOrThrow(PodDBAdapter.KEY_SIZE);
@@ -38,7 +38,7 @@
      */
     @NonNull
     public FeedMedia getFeedMedia() {
-        long playbackCompletionTime = getLong(indexPlaybackCompletionDate);
+        long playbackCompletionTime = getLong(indexLastPlayedTimeHistory);
         Date playbackCompletionDate = playbackCompletionTime > 0 ? new Date(playbackCompletionTime) : null;
 
         Boolean hasEmbeddedPicture;
@@ -59,7 +59,7 @@
                 getString(indexFileUrl),
                 getString(indexDownloadUrl),
                 getLong(indexDownloadDate),
-                playbackCompletionDate,
+                null, // playbackCompletionDate is deprecated, use lastPlayedTimeHistory instead
                 getInt(indexPlayedDuration),
                 hasEmbeddedPicture,
                 getLong(indexLastPlayedTime)
@@ -67,6 +67,7 @@
         return new FeedMedia(
                 getLong(indexId),
                 null,
                 getInt(indexDuration),
                 getInt(indexPosition),
                 getLong(indexSize),
                 getString(indexMimeType),
                 getString(indexFileUrl),
                 getString(indexDownloadUrl),
                 getLong(indexDownloadDate),
                 null, // playbackCompletionDate is deprecated, use lastPlayedTimeHistory instead
                 getInt(indexPlayedDuration),
                 hasEmbeddedPicture,
                 getLong(indexLastPlayedTime),
                 playbackCompletionDate // lastPlayedTimeHistory
         );
     }
 }