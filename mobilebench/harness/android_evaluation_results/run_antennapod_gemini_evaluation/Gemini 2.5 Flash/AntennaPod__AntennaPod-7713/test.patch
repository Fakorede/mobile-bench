diff --git a/app/src/androidTest/java/de/test/antennapod/service/playback/PlaybackServiceTaskManagerTest.java b/app/src/androidTest/java/de/test/antennapod/service/playback/PlaybackServiceTaskManagerTest.java
index 85469b2b2b5..c9b71e8f3b7 100644
--- a/app/src/androidTest/java/de/test/antennapod/service/playback/PlaybackServiceTaskManagerTest.java
+++ b/app/src/androidTest/java/de/test/antennapod/service/playback/PlaybackServiceTaskManagerTest.java
@@ -5,13 +5,10 @@
 import androidx.test.annotation.UiThreadTest;
 import androidx.test.filters.LargeTest;
 
-import de.danoeh.antennapod.event.playback.SleepTimerUpdatedEvent;
 import de.danoeh.antennapod.playback.service.internal.PlaybackServiceTaskManager;
 import de.danoeh.antennapod.storage.preferences.SleepTimerPreferences;
 import de.danoeh.antennapod.storage.database.PodDBAdapter;
 import de.danoeh.antennapod.ui.widget.WidgetUpdater;
-import org.greenrobot.eventbus.EventBus;
-import org.greenrobot.eventbus.Subscribe;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -28,7 +25,6 @@
 
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
 
 /**
  * Test class for PlaybackServiceTaskManager
@@ -190,7 +186,6 @@ public void testCancelAllTasksNoTasksStarted() {
         pstm.cancelAllTasks();
         assertFalse(pstm.isPositionSaverActive());
         assertFalse(pstm.isWidgetUpdaterActive());
-        assertFalse(pstm.isSleepTimerActive());
         pstm.shutdown();
     }
 
@@ -201,82 +196,9 @@ public void testCancelAllTasksAllTasksStarted() {
         PlaybackServiceTaskManager pstm = new PlaybackServiceTaskManager(c, defaultPSTM);
         pstm.startWidgetUpdater();
         pstm.startPositionSaver();
-        pstm.setSleepTimer(100000);
         pstm.cancelAllTasks();
         assertFalse(pstm.isPositionSaverActive());
         assertFalse(pstm.isWidgetUpdaterActive());
-        assertFalse(pstm.isSleepTimerActive());
-        pstm.shutdown();
-    }
-
-    @Test
-    @UiThreadTest
-    public void testSetSleepTimer() throws InterruptedException {
-        final Context c = InstrumentationRegistry.getInstrumentation().getTargetContext();
-        final long TIME = 2000;
-        final long TIMEOUT = 2 * TIME;
-        final CountDownLatch countDownLatch = new CountDownLatch(1);
-        Object timerReceiver = new Object() {
-            @Subscribe
-            public void sleepTimerUpdate(SleepTimerUpdatedEvent event) {
-                if (countDownLatch.getCount() == 0) {
-                    fail();
-                }
-                countDownLatch.countDown();
-            }
-        };
-        EventBus.getDefault().register(timerReceiver);
-        PlaybackServiceTaskManager pstm = new PlaybackServiceTaskManager(c, defaultPSTM);
-        pstm.setSleepTimer(TIME);
-        countDownLatch.await(TIMEOUT, TimeUnit.MILLISECONDS);
-        EventBus.getDefault().unregister(timerReceiver);
-        pstm.shutdown();
-    }
-
-    @Test
-    @UiThreadTest
-    public void testDisableSleepTimer() throws InterruptedException {
-        final Context c = InstrumentationRegistry.getInstrumentation().getTargetContext();
-        final long TIME = 5000;
-        final long TIMEOUT = 2 * TIME;
-        final CountDownLatch countDownLatch = new CountDownLatch(1);
-        Object timerReceiver = new Object() {
-            @Subscribe
-            public void sleepTimerUpdate(SleepTimerUpdatedEvent event) {
-                if (event.isOver()) {
-                    countDownLatch.countDown();
-                } else if (event.getTimeLeft() == 1) {
-                    fail("Arrived at 1 but should have been cancelled");
-                }
-            }
-        };
-        PlaybackServiceTaskManager pstm = new PlaybackServiceTaskManager(c, defaultPSTM);
-        EventBus.getDefault().register(timerReceiver);
-        pstm.setSleepTimer(TIME);
-        pstm.disableSleepTimer();
-        assertFalse(countDownLatch.await(TIMEOUT, TimeUnit.MILLISECONDS));
-        pstm.shutdown();
-        EventBus.getDefault().unregister(timerReceiver);
-    }
-
-    @Test
-    @UiThreadTest
-    public void testIsSleepTimerActivePositive() {
-        final Context c = InstrumentationRegistry.getInstrumentation().getTargetContext();
-        PlaybackServiceTaskManager pstm = new PlaybackServiceTaskManager(c, defaultPSTM);
-        pstm.setSleepTimer(1000);
-        assertTrue(pstm.isSleepTimerActive());
-        pstm.shutdown();
-    }
-
-    @Test
-    @UiThreadTest
-    public void testIsSleepTimerActiveNegative() {
-        final Context c = InstrumentationRegistry.getInstrumentation().getTargetContext();
-        PlaybackServiceTaskManager pstm = new PlaybackServiceTaskManager(c, defaultPSTM);
-        pstm.setSleepTimer(10000);
-        pstm.disableSleepTimer();
-        assertFalse(pstm.isSleepTimerActive());
         pstm.shutdown();
     }
 
