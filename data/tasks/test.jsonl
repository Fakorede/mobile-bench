{"repo": "bitwarden/android", "pull_number": 4914, "instance_id": "bitwarden__android-4914", "issue_numbers": [], "base_commit": "22376bfe4b589573f772cf59026851bfe3adb98c", "patch": "diff --git a/app/src/main/java/com/x8bit/bitwarden/ui/platform/feature/settings/accountsecurity/PinInputDialog.kt b/app/src/main/java/com/x8bit/bitwarden/ui/platform/feature/settings/accountsecurity/PinInputDialog.kt\nindex dd4e09c69af..0794e5d2531 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/ui/platform/feature/settings/accountsecurity/PinInputDialog.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/ui/platform/feature/settings/accountsecurity/PinInputDialog.kt\n@@ -38,6 +38,8 @@ import com.x8bit.bitwarden.ui.platform.components.model.CardStyle\n import com.x8bit.bitwarden.ui.platform.components.util.maxDialogHeight\n import com.x8bit.bitwarden.ui.platform.theme.BitwardenTheme\n \n+private const val MINIMUM_PIN_LENGTH: Int = 4\n+\n /**\n  * A dialog for setting a user's PIN.\n  *\n@@ -138,6 +140,7 @@ fun PinInputDialog(\n \n                 BitwardenFilledButton(\n                     label = stringResource(id = R.string.submit),\n+                    isEnabled = !isPinCreation || pin.length >= MINIMUM_PIN_LENGTH,\n                     onClick = { onSubmitClick(pin) },\n                     modifier = Modifier.testTag(tag = \"AcceptAlertButton\"),\n                 )\ndiff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml\nindex 09eb9d7b6ed..82204babf1a 100644\n--- a/app/src/main/res/values/strings.xml\n+++ b/app/src/main/res/values/strings.xml\n@@ -480,7 +480,7 @@ Scanning will happen automatically.</string>\n   <string name=\"unlock\">Unlock</string>\n   <string name=\"unlock_vault\">Unlock vault</string>\n   <string name=\"thirty_minutes\">30 minutes</string>\n-  <string name=\"set_pin_description\">Set your PIN code for unlocking Bitwarden. Your PIN settings will be reset if you ever fully log out of the application.</string>\n+  <string name=\"set_pin_description\">Your PIN must be at least 4 characters. Your PIN settings will be reset if you ever fully log out of the application.</string>\n   <string name=\"logged_in_as_on\">Logged in as %1$s on %2$s.</string>\n   <string name=\"vault_locked_master_password\">Your vault is locked. Verify your master password to continue.</string>\n   <string name=\"vault_locked_pin\">Your vault is locked. Verify your PIN code to continue.</string>\n", "test_patch": "diff --git a/app/src/test/java/com/x8bit/bitwarden/ui/auth/feature/accountsetup/SetupUnlockScreenTest.kt b/app/src/test/java/com/x8bit/bitwarden/ui/auth/feature/accountsetup/SetupUnlockScreenTest.kt\nindex ed27aa1b148..93e66d730f5 100644\n--- a/app/src/test/java/com/x8bit/bitwarden/ui/auth/feature/accountsetup/SetupUnlockScreenTest.kt\n+++ b/app/src/test/java/com/x8bit/bitwarden/ui/auth/feature/accountsetup/SetupUnlockScreenTest.kt\n@@ -2,6 +2,7 @@ package com.x8bit.bitwarden.ui.auth.feature.accountsetup\n \n import androidx.compose.ui.test.assertIsDisplayed\n import androidx.compose.ui.test.assertIsEnabled\n+import androidx.compose.ui.test.assertIsNotEnabled\n import androidx.compose.ui.test.assertIsOff\n import androidx.compose.ui.test.assertIsOn\n import androidx.compose.ui.test.filterToOne\n@@ -257,8 +258,8 @@ class SetupUnlockScreenTest : BaseComposeTest() {\n             .assertIsDisplayed()\n         composeTestRule\n             .onAllNodesWithText(\n-                text = \"Set your PIN code for unlocking Bitwarden. Your PIN settings will be reset if \" +\n-                    \"you ever fully log out of the application.\",\n+                text = \"Your PIN must be at least 4 characters. Your PIN settings will be reset \" +\n+                    \"if you ever fully log out of the application.\",\n             )\n             .filterToOne(hasAnyAncestor(isDialog()))\n             .assertIsDisplayed()\n@@ -306,9 +307,8 @@ class SetupUnlockScreenTest : BaseComposeTest() {\n         composeTestRule.assertNoDialogExists()\n     }\n \n-    @Suppress(\"MaxLineLength\")\n     @Test\n-    fun `PIN input dialog Submit click with empty pin should clear the dialog and send UnlockWithPinToggle Disabled`() {\n+    fun `PIN input dialog with empty pin should disable submit button`() {\n         mutableStateFlow.update {\n             it.copy(isUnlockWithPinEnabled = false)\n         }\n@@ -320,14 +320,7 @@ class SetupUnlockScreenTest : BaseComposeTest() {\n         composeTestRule\n             .onAllNodesWithText(text = \"Submit\")\n             .filterToOne(hasAnyAncestor(isDialog()))\n-            .performClick()\n-\n-        verify {\n-            viewModel.trySendAction(\n-                SetupUnlockAction.UnlockWithPinToggle(UnlockWithPinState.Disabled),\n-            )\n-        }\n-        composeTestRule.assertNoDialogExists()\n+            .assertIsNotEnabled()\n     }\n \n     @Suppress(\"MaxLineLength\")\ndiff --git a/app/src/test/java/com/x8bit/bitwarden/ui/platform/feature/settings/accountsecurity/AccountSecurityScreenTest.kt b/app/src/test/java/com/x8bit/bitwarden/ui/platform/feature/settings/accountsecurity/AccountSecurityScreenTest.kt\nindex 7eacd87a429..4fca3b62f4d 100644\n--- a/app/src/test/java/com/x8bit/bitwarden/ui/platform/feature/settings/accountsecurity/AccountSecurityScreenTest.kt\n+++ b/app/src/test/java/com/x8bit/bitwarden/ui/platform/feature/settings/accountsecurity/AccountSecurityScreenTest.kt\n@@ -3,6 +3,7 @@ package com.x8bit.bitwarden.ui.platform.feature.settings.accountsecurity\n import androidx.compose.ui.test.assert\n import androidx.compose.ui.test.assertIsDisplayed\n import androidx.compose.ui.test.assertIsFocused\n+import androidx.compose.ui.test.assertIsNotEnabled\n import androidx.compose.ui.test.assertIsOff\n import androidx.compose.ui.test.assertIsOn\n import androidx.compose.ui.test.filterToOne\n@@ -352,8 +353,8 @@ class AccountSecurityScreenTest : BaseComposeTest() {\n             .assertIsDisplayed()\n         composeTestRule\n             .onAllNodesWithText(\n-                \"Set your PIN code for unlocking Bitwarden. Your PIN settings will be reset if \" +\n-                    \"you ever fully log out of the application.\",\n+                text = \"Your PIN must be at least 4 characters. Your PIN settings will be reset \" +\n+                    \"if you ever fully log out of the application.\",\n             )\n             .filterToOne(hasAnyAncestor(isDialog()))\n             .assertIsDisplayed()\n@@ -402,9 +403,8 @@ class AccountSecurityScreenTest : BaseComposeTest() {\n         composeTestRule.assertNoDialogExists()\n     }\n \n-    @Suppress(\"MaxLineLength\")\n     @Test\n-    fun `PIN input dialog Submit click with empty pin should clear the dialog and send UnlockWithPinToggle Disabled`() {\n+    fun `PIN input dialog with empty pin should disable the Submit button`() {\n         mutableStateFlow.update {\n             it.copy(isUnlockWithPinEnabled = false)\n         }\n@@ -414,16 +414,9 @@ class AccountSecurityScreenTest : BaseComposeTest() {\n             .performClick()\n \n         composeTestRule\n-            .onAllNodesWithText(\"Submit\")\n+            .onAllNodesWithText(text = \"Submit\")\n             .filterToOne(hasAnyAncestor(isDialog()))\n-            .performClick()\n-\n-        verify {\n-            viewModel.trySendAction(\n-                AccountSecurityAction.UnlockWithPinToggle(UnlockWithPinState.Disabled),\n-            )\n-        }\n-        composeTestRule.assertNoDialogExists()\n+            .assertIsNotEnabled()\n     }\n \n     @Suppress(\"MaxLineLength\")\n", "problem_statement": "PM-8953: Require 4 digits for pin entry\n## Objective\nThis PR updates the Pin Entry dialog to require 4 digits minimum when creating a new pin.", "hints_text": "", "created_at": "2025-03-25T19:55:53Z"}
{"repo": "bitwarden/android", "pull_number": 4893, "instance_id": "bitwarden__android-4893", "issue_numbers": [], "base_commit": "f22156389b28e4ba41513e664c4e0b3874a3ea7e", "patch": "diff --git a/app/src/main/java/com/x8bit/bitwarden/data/platform/manager/KeyManagerImpl.kt b/app/src/main/java/com/x8bit/bitwarden/data/platform/manager/KeyManagerImpl.kt\nindex ef23908bdd8..e8f031dfb61 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/data/platform/manager/KeyManagerImpl.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/data/platform/manager/KeyManagerImpl.kt\n@@ -5,6 +5,7 @@ import android.security.KeyChain\n import android.security.KeyChainException\n import com.x8bit.bitwarden.data.platform.datasource.disk.model.MutualTlsCertificate\n import com.x8bit.bitwarden.data.platform.datasource.disk.model.MutualTlsKeyHost\n+import com.x8bit.bitwarden.data.platform.error.MissingPropertyException\n import com.x8bit.bitwarden.data.platform.manager.model.ImportPrivateKeyResult\n import timber.log.Timber\n import java.io.IOException\n@@ -24,7 +25,7 @@ class KeyManagerImpl(\n     private val context: Context,\n ) : KeyManager {\n \n-    @Suppress(\"CyclomaticComplexMethod\")\n+    @Suppress(\"LongMethod\", \"CyclomaticComplexMethod\")\n     override fun importMutualTlsCertificate(\n         key: ByteArray,\n         alias: String,\n@@ -35,28 +36,29 @@ class KeyManagerImpl(\n             .inputStream()\n             .use { stream ->\n                 try {\n-                    KeyStore.getInstance(KEYSTORE_TYPE_PKCS12)\n+                    KeyStore\n+                        .getInstance(KEYSTORE_TYPE_PKCS12)\n                         .also { it.load(stream, password.toCharArray()) }\n                 } catch (e: KeyStoreException) {\n                     Timber.Forest.e(e, \"Failed to load PKCS12 bytes\")\n-                    return ImportPrivateKeyResult.Error.UnsupportedKey\n+                    return ImportPrivateKeyResult.Error.UnsupportedKey(throwable = e)\n                 } catch (e: IOException) {\n                     Timber.Forest.e(e, \"Format or password error while loading PKCS12 bytes\")\n                     return when (e.cause) {\n                         is UnrecoverableKeyException -> {\n-                            ImportPrivateKeyResult.Error.UnrecoverableKey\n+                            ImportPrivateKeyResult.Error.UnrecoverableKey(throwable = e)\n                         }\n \n                         else -> {\n-                            ImportPrivateKeyResult.Error.KeyStoreOperationFailed\n+                            ImportPrivateKeyResult.Error.KeyStoreOperationFailed(throwable = e)\n                         }\n                     }\n                 } catch (e: CertificateException) {\n                     Timber.Forest.e(e, \"Unable to load certificate chain\")\n-                    return ImportPrivateKeyResult.Error.InvalidCertificateChain\n+                    return ImportPrivateKeyResult.Error.InvalidCertificateChain(throwable = e)\n                 } catch (e: NoSuchAlgorithmException) {\n                     Timber.Forest.e(e, \"Cryptographic algorithm not supported\")\n-                    return ImportPrivateKeyResult.Error.UnsupportedKey\n+                    return ImportPrivateKeyResult.Error.UnsupportedKey(throwable = e)\n                 }\n             }\n \n@@ -64,22 +66,29 @@ class KeyManagerImpl(\n         val internalAlias = pkcs12KeyStore.aliases()\n             ?.takeIf { it.hasMoreElements() }\n             ?.nextElement()\n-            ?: return ImportPrivateKeyResult.Error.UnsupportedKey\n+            ?: return ImportPrivateKeyResult.Error.UnsupportedKey(\n+                throwable = MissingPropertyException(\"Internal Alias\"),\n+            )\n \n         // Step 3: Extract PrivateKey and X.509 certificate from the KeyStore and verify\n         // certificate alias.\n         val privateKey = try {\n-            pkcs12KeyStore.getKey(internalAlias, password.toCharArray())\n-                ?: return ImportPrivateKeyResult.Error.UnrecoverableKey\n+            pkcs12KeyStore\n+                .getKey(internalAlias, password.toCharArray())\n+                ?: return ImportPrivateKeyResult.Error.UnrecoverableKey(\n+                    throwable = MissingPropertyException(\"Private Key\"),\n+                )\n         } catch (e: UnrecoverableKeyException) {\n             Timber.Forest.e(e, \"Failed to get private key\")\n-            return ImportPrivateKeyResult.Error.UnrecoverableKey\n+            return ImportPrivateKeyResult.Error.UnrecoverableKey(throwable = e)\n         }\n \n         val certChain: Array<Certificate> = pkcs12KeyStore\n             .getCertificateChain(internalAlias)\n             ?.takeUnless { it.isEmpty() }\n-            ?: return ImportPrivateKeyResult.Error.InvalidCertificateChain\n+            ?: return ImportPrivateKeyResult.Error.InvalidCertificateChain(\n+                throwable = MissingPropertyException(\"Certificate Chain\"),\n+            )\n \n         // Step 4: Store the private key and X.509 certificate in the AndroidKeyStore if the alias\n         // does not exists.\n@@ -92,7 +101,7 @@ class KeyManagerImpl(\n                 setKeyEntry(alias, privateKey, null, certChain)\n             } catch (e: KeyStoreException) {\n                 Timber.Forest.e(e, \"Failed to import key into Android KeyStore\")\n-                return ImportPrivateKeyResult.Error.KeyStoreOperationFailed\n+                return ImportPrivateKeyResult.Error.KeyStoreOperationFailed(throwable = e)\n             }\n         }\n         return ImportPrivateKeyResult.Success(alias)\ndiff --git a/app/src/main/java/com/x8bit/bitwarden/data/platform/manager/model/ImportPrivateKeyResult.kt b/app/src/main/java/com/x8bit/bitwarden/data/platform/manager/model/ImportPrivateKeyResult.kt\nindex 2cf360ddb68..1df61bdbe3f 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/data/platform/manager/model/ImportPrivateKeyResult.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/data/platform/manager/model/ImportPrivateKeyResult.kt\n@@ -16,30 +16,44 @@ sealed class ImportPrivateKeyResult {\n      * Represents a generic error during the import process.\n      */\n     sealed class Error : ImportPrivateKeyResult() {\n+        /**\n+         * The underlying error.\n+         */\n+        abstract val throwable: Throwable?\n \n         /**\n          * Indicates that the provided key is unrecoverable or the password is incorrect.\n          */\n-        data object UnrecoverableKey : Error()\n+        data class UnrecoverableKey(\n+            override val throwable: Throwable,\n+        ) : Error()\n \n         /**\n          * Indicates that the certificate chain associated with the key is invalid.\n          */\n-        data object InvalidCertificateChain : Error()\n+        data class InvalidCertificateChain(\n+            override val throwable: Throwable,\n+        ) : Error()\n \n         /**\n          * Indicates that the specified alias is already in use.\n          */\n-        data object DuplicateAlias : Error()\n+        data object DuplicateAlias : Error() {\n+            override val throwable: Throwable? = null\n+        }\n \n         /**\n          * Indicates that an error occurred during the key store operation.\n          */\n-        data object KeyStoreOperationFailed : Error()\n+        data class KeyStoreOperationFailed(\n+            override val throwable: Throwable,\n+        ) : Error()\n \n         /**\n          * Indicates the provided key is not supported.\n          */\n-        data object UnsupportedKey : Error()\n+        data class UnsupportedKey(\n+            override val throwable: Throwable,\n+        ) : Error()\n     }\n }\ndiff --git a/app/src/main/java/com/x8bit/bitwarden/data/platform/repository/SettingsRepositoryImpl.kt b/app/src/main/java/com/x8bit/bitwarden/data/platform/repository/SettingsRepositoryImpl.kt\nindex 13364b92694..239d9edebd7 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/data/platform/repository/SettingsRepositoryImpl.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/data/platform/repository/SettingsRepositoryImpl.kt\n@@ -494,7 +494,8 @@ class SettingsRepositoryImpl(\n     }\n \n     override suspend fun setupBiometricsKey(cipher: Cipher): BiometricsKeyResult {\n-        val userId = activeUserId ?: return BiometricsKeyResult.Error\n+        val userId = activeUserId\n+            ?: return BiometricsKeyResult.Error(error = NoActiveUserException())\n         return vaultSdkSource\n             .getUserEncryptionKey(userId = userId)\n             .onSuccess { biometricsKey ->\n@@ -508,7 +509,7 @@ class SettingsRepositoryImpl(\n             }\n             .fold(\n                 onSuccess = { BiometricsKeyResult.Success },\n-                onFailure = { BiometricsKeyResult.Error },\n+                onFailure = { BiometricsKeyResult.Error(error = it) },\n             )\n     }\n \ndiff --git a/app/src/main/java/com/x8bit/bitwarden/data/platform/repository/model/BiometricsKeyResult.kt b/app/src/main/java/com/x8bit/bitwarden/data/platform/repository/model/BiometricsKeyResult.kt\nindex 029b8a7ac21..0d41d422101 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/data/platform/repository/model/BiometricsKeyResult.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/data/platform/repository/model/BiometricsKeyResult.kt\n@@ -12,5 +12,7 @@ sealed class BiometricsKeyResult {\n     /**\n      * Generic error while setting up the biometrics key.\n      */\n-    data object Error : BiometricsKeyResult()\n+    data class Error(\n+        val error: Throwable,\n+    ) : BiometricsKeyResult()\n }\ndiff --git a/app/src/main/java/com/x8bit/bitwarden/data/vault/datasource/sdk/model/FindFido2CredentialsResult.kt b/app/src/main/java/com/x8bit/bitwarden/data/vault/datasource/sdk/model/FindFido2CredentialsResult.kt\ndeleted file mode 100644\nindex 8dc1618ae0b..00000000000\n--- a/app/src/main/java/com/x8bit/bitwarden/data/vault/datasource/sdk/model/FindFido2CredentialsResult.kt\n+++ /dev/null\n@@ -1,19 +0,0 @@\n-package com.x8bit.bitwarden.data.vault.datasource.sdk.model\n-\n-import com.bitwarden.vault.CipherView\n-\n-/**\n- * Models the result of querying for ciphers with FIDO 2 credentials.\n- */\n-sealed class FindFido2CredentialsResult {\n-\n-    /**\n-     * Indicates the query was executed successfully.\n-     */\n-    data class Success(val cipherViews: List<CipherView>) : FindFido2CredentialsResult()\n-\n-    /**\n-     * Indicates the query was not executed successfully.\n-     */\n-    data object Error : FindFido2CredentialsResult()\n-}\ndiff --git a/app/src/main/java/com/x8bit/bitwarden/data/vault/datasource/sdk/model/SaveCredentialResult.kt b/app/src/main/java/com/x8bit/bitwarden/data/vault/datasource/sdk/model/SaveCredentialResult.kt\ndeleted file mode 100644\nindex 7788cbf574e..00000000000\n--- a/app/src/main/java/com/x8bit/bitwarden/data/vault/datasource/sdk/model/SaveCredentialResult.kt\n+++ /dev/null\n@@ -1,17 +0,0 @@\n-package com.x8bit.bitwarden.data.vault.datasource.sdk.model\n-\n-/**\n- * Models the result of saving a FIDO 2 credential.\n- */\n-sealed class SaveCredentialResult {\n-\n-    /**\n-     * Indicates the credential has been saved.\n-     */\n-    data object Success : SaveCredentialResult()\n-\n-    /**\n-     * Indicates the credential was not saved.\n-     */\n-    data object Error : SaveCredentialResult()\n-}\ndiff --git a/app/src/main/java/com/x8bit/bitwarden/data/vault/manager/CipherManagerImpl.kt b/app/src/main/java/com/x8bit/bitwarden/data/vault/manager/CipherManagerImpl.kt\nindex 4f2d247a26d..f7ac707d790 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/data/vault/manager/CipherManagerImpl.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/data/vault/manager/CipherManagerImpl.kt\n@@ -446,7 +446,10 @@ class CipherManagerImpl(\n             ?: return IllegalStateException(\"Attachment does not have a url\").asFailure()\n \n         val encryptedFile = when (val result = fileManager.downloadFileToCache(url)) {\n-            DownloadResult.Failure -> return IllegalStateException(\"Download failed\").asFailure()\n+            is DownloadResult.Failure -> {\n+                return IllegalStateException(\"Download failed\", result.error).asFailure()\n+            }\n+\n             is DownloadResult.Success -> result.file\n         }\n \ndiff --git a/app/src/main/java/com/x8bit/bitwarden/data/vault/manager/FileManagerImpl.kt b/app/src/main/java/com/x8bit/bitwarden/data/vault/manager/FileManagerImpl.kt\nindex c8332784775..57fcb0716ea 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/data/vault/manager/FileManagerImpl.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/data/vault/manager/FileManagerImpl.kt\n@@ -44,7 +44,7 @@ class FileManagerImpl(\n             .getDataStream(url)\n             .fold(\n                 onSuccess = { it },\n-                onFailure = { return DownloadResult.Failure },\n+                onFailure = { return DownloadResult.Failure(error = it) },\n             )\n \n         // Create a temporary file in cache to write to\n@@ -66,7 +66,7 @@ class FileManagerImpl(\n                         }\n                         fos.flush()\n                     } catch (e: RuntimeException) {\n-                        return@withContext DownloadResult.Failure\n+                        return@withContext DownloadResult.Failure(error = e)\n                     }\n                 }\n             }\n@@ -94,7 +94,7 @@ class FileManagerImpl(\n                     }\n             }\n             true\n-        } catch (exception: RuntimeException) {\n+        } catch (_: RuntimeException) {\n             false\n         }\n     }\n@@ -111,7 +111,7 @@ class FileManagerImpl(\n                     }\n             }\n             true\n-        } catch (exception: RuntimeException) {\n+        } catch (_: RuntimeException) {\n             false\n         }\n     }\ndiff --git a/app/src/main/java/com/x8bit/bitwarden/data/vault/manager/model/DownloadResult.kt b/app/src/main/java/com/x8bit/bitwarden/data/vault/manager/model/DownloadResult.kt\nindex 5bbc4ed8125..fb96897f46b 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/data/vault/manager/model/DownloadResult.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/data/vault/manager/model/DownloadResult.kt\n@@ -14,5 +14,7 @@ sealed class DownloadResult {\n     /**\n      * The download failed.\n      */\n-    data object Failure : DownloadResult()\n+    data class Failure(\n+        val error: Throwable,\n+    ) : DownloadResult()\n }\ndiff --git a/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/accountsetup/SetupUnlockViewModel.kt b/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/accountsetup/SetupUnlockViewModel.kt\nindex a0a39e29ea0..7611fdd2a61 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/accountsetup/SetupUnlockViewModel.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/accountsetup/SetupUnlockViewModel.kt\n@@ -164,7 +164,7 @@ class SetupUnlockViewModel @Inject constructor(\n                 settingsRepository.storeUnlockPin(\n                     pin = state.pin,\n                     shouldRequireMasterPasswordOnRestart =\n-                    state.shouldRequireMasterPasswordOnRestart,\n+                        state.shouldRequireMasterPasswordOnRestart,\n                 )\n             }\n         }\n@@ -182,7 +182,7 @@ class SetupUnlockViewModel @Inject constructor(\n         action: SetupUnlockAction.Internal.BiometricsKeyResultReceive,\n     ) {\n         when (action.result) {\n-            BiometricsKeyResult.Error -> {\n+            is BiometricsKeyResult.Error -> {\n                 mutableStateFlow.update {\n                     it.copy(\n                         dialogState = null,\ndiff --git a/app/src/main/java/com/x8bit/bitwarden/ui/platform/feature/settings/accountsecurity/AccountSecurityViewModel.kt b/app/src/main/java/com/x8bit/bitwarden/ui/platform/feature/settings/accountsecurity/AccountSecurityViewModel.kt\nindex 8deaf6be257..4059e24efa9 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/ui/platform/feature/settings/accountsecurity/AccountSecurityViewModel.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/ui/platform/feature/settings/accountsecurity/AccountSecurityViewModel.kt\n@@ -74,8 +74,8 @@ class AccountSecurityViewModel @Inject constructor(\n                 ?.hasMasterPassword != false,\n             isUnlockWithPinEnabled = settingsRepository.isUnlockWithPinEnabled,\n             shouldShowEnableAuthenticatorSync =\n-            featureFlagManager.getFeatureFlag(FlagKey.AuthenticatorSync) &&\n-                !isBuildVersionBelow(Build.VERSION_CODES.S),\n+                featureFlagManager.getFeatureFlag(FlagKey.AuthenticatorSync) &&\n+                    !isBuildVersionBelow(Build.VERSION_CODES.S),\n             userId = userId,\n             vaultTimeout = settingsRepository.vaultTimeout,\n             vaultTimeoutAction = settingsRepository.vaultTimeoutAction,\n@@ -365,7 +365,7 @@ class AccountSecurityViewModel @Inject constructor(\n                 settingsRepository.storeUnlockPin(\n                     pin = state.pin,\n                     shouldRequireMasterPasswordOnRestart =\n-                    state.shouldRequireMasterPasswordOnRestart,\n+                        state.shouldRequireMasterPasswordOnRestart,\n                 )\n             }\n         }\n@@ -464,7 +464,7 @@ class AccountSecurityViewModel @Inject constructor(\n         action: AccountSecurityAction.Internal.BiometricsKeyResultReceive,\n     ) {\n         when (action.result) {\n-            BiometricsKeyResult.Error -> {\n+            is BiometricsKeyResult.Error -> {\n                 mutableStateFlow.update {\n                     it.copy(\n                         dialog = null,\n", "test_patch": "diff --git a/app/src/test/java/com/x8bit/bitwarden/data/auth/repository/AuthRepositoryTest.kt b/app/src/test/java/com/x8bit/bitwarden/data/auth/repository/AuthRepositoryTest.kt\nindex b529c94d055..80fa7d44924 100644\n--- a/app/src/test/java/com/x8bit/bitwarden/data/auth/repository/AuthRepositoryTest.kt\n+++ b/app/src/test/java/com/x8bit/bitwarden/data/auth/repository/AuthRepositoryTest.kt\n@@ -316,7 +316,7 @@ class AuthRepositoryTest {\n             GetTokenResponseJson.Success::toUserState,\n             UserStateJson::toRemovedPasswordUserStateJson,\n         )\n-        unmockkStatic(\n+        mockkConstructor(\n             NoActiveUserException::class,\n             MissingPropertyException::class,\n         )\ndiff --git a/app/src/test/java/com/x8bit/bitwarden/data/platform/manager/KeyManagerTest.kt b/app/src/test/java/com/x8bit/bitwarden/data/platform/manager/KeyManagerTest.kt\nindex 3c70f1a47b9..179fa549386 100644\n--- a/app/src/test/java/com/x8bit/bitwarden/data/platform/manager/KeyManagerTest.kt\n+++ b/app/src/test/java/com/x8bit/bitwarden/data/platform/manager/KeyManagerTest.kt\n@@ -3,14 +3,17 @@ package com.x8bit.bitwarden.data.platform.manager\n import android.content.Context\n import android.security.KeyChain\n import android.security.KeyChainException\n-import com.x8bit.bitwarden.data.platform.manager.model.ImportPrivateKeyResult\n import com.x8bit.bitwarden.data.platform.datasource.disk.model.MutualTlsCertificate\n import com.x8bit.bitwarden.data.platform.datasource.disk.model.MutualTlsKeyHost\n+import com.x8bit.bitwarden.data.platform.error.MissingPropertyException\n+import com.x8bit.bitwarden.data.platform.manager.model.ImportPrivateKeyResult\n import io.mockk.every\n import io.mockk.just\n import io.mockk.mockk\n+import io.mockk.mockkConstructor\n import io.mockk.mockkStatic\n import io.mockk.runs\n+import io.mockk.unmockkConstructor\n import io.mockk.unmockkStatic\n import io.mockk.verify\n import org.junit.jupiter.api.AfterEach\n@@ -39,11 +42,16 @@ class KeyManagerTest {\n     @BeforeEach\n     fun setUp() {\n         mockkStatic(KeyStore::class, KeyChain::class)\n+        mockkConstructor(MissingPropertyException::class)\n+        every {\n+            anyConstructed<MissingPropertyException>() == any<MissingPropertyException>()\n+        } returns true\n     }\n \n     @AfterEach\n     fun tearDown() {\n         unmockkStatic(KeyStore::class, KeyChain::class)\n+        unmockkConstructor(MissingPropertyException::class)\n     }\n \n     @Test\n@@ -367,11 +375,10 @@ class KeyManagerTest {\n         val password = \"password\"\n \n         // Verify KeyStoreException is handled\n-        every {\n-            mockPkcs12KeyStore.load(any(), any())\n-        } throws KeyStoreException()\n+        val keystoreError = KeyStoreException()\n+        every { mockPkcs12KeyStore.load(any(), any()) } throws keystoreError\n         assertEquals(\n-            ImportPrivateKeyResult.Error.UnsupportedKey,\n+            ImportPrivateKeyResult.Error.UnsupportedKey(throwable = keystoreError),\n             keyDiskSource.importMutualTlsCertificate(\n                 key = pkcs12Bytes,\n                 alias = expectedAlias,\n@@ -380,11 +387,12 @@ class KeyManagerTest {\n         ) { \"KeyStoreException was not handled correctly\" }\n \n         // Verify IOException is handled\n-        every {\n-            mockPkcs12KeyStore.load(any(), any())\n-        } throws IOException()\n+        val keystoreOperationIoError = IOException()\n+        every { mockPkcs12KeyStore.load(any(), any()) } throws keystoreOperationIoError\n         assertEquals(\n-            ImportPrivateKeyResult.Error.KeyStoreOperationFailed,\n+            ImportPrivateKeyResult.Error.KeyStoreOperationFailed(\n+                throwable = keystoreOperationIoError,\n+            ),\n             keyDiskSource.importMutualTlsCertificate(\n                 key = pkcs12Bytes,\n                 alias = expectedAlias,\n@@ -393,12 +401,10 @@ class KeyManagerTest {\n         ) { \"IOException was not handled correctly\" }\n \n         // Verify IOException with UnrecoverableKeyException cause is handled\n-        every {\n-            mockPkcs12KeyStore.load(any(), any())\n-        } throws IOException(UnrecoverableKeyException())\n-\n+        val unrecoverableKeyError = IOException(UnrecoverableKeyException())\n+        every { mockPkcs12KeyStore.load(any(), any()) } throws unrecoverableKeyError\n         assertEquals(\n-            ImportPrivateKeyResult.Error.UnrecoverableKey,\n+            ImportPrivateKeyResult.Error.UnrecoverableKey(throwable = unrecoverableKeyError),\n             keyDiskSource.importMutualTlsCertificate(\n                 key = pkcs12Bytes,\n                 alias = expectedAlias,\n@@ -407,11 +413,12 @@ class KeyManagerTest {\n         )\n \n         // Verify IOException with unexpected cause is handled\n-        every {\n-            mockPkcs12KeyStore.load(any(), any())\n-        } throws IOException(Exception())\n+        val keystoreOperationError = IOException(Exception())\n+        every { mockPkcs12KeyStore.load(any(), any()) } throws keystoreOperationError\n         assertEquals(\n-            ImportPrivateKeyResult.Error.KeyStoreOperationFailed,\n+            ImportPrivateKeyResult.Error.KeyStoreOperationFailed(\n+                throwable = keystoreOperationError,\n+            ),\n             keyDiskSource.importMutualTlsCertificate(\n                 key = pkcs12Bytes,\n                 alias = expectedAlias,\n@@ -420,11 +427,10 @@ class KeyManagerTest {\n         ) { \"IOException with Unexpected exception cause was not handled correctly\" }\n \n         // Verify CertificateException is handled\n-        every {\n-            mockPkcs12KeyStore.load(any(), any())\n-        } throws CertificateException()\n+        val certificateError = CertificateException()\n+        every { mockPkcs12KeyStore.load(any(), any()) } throws certificateError\n         assertEquals(\n-            ImportPrivateKeyResult.Error.InvalidCertificateChain,\n+            ImportPrivateKeyResult.Error.InvalidCertificateChain(throwable = certificateError),\n             keyDiskSource.importMutualTlsCertificate(\n                 key = pkcs12Bytes,\n                 alias = expectedAlias,\n@@ -433,11 +439,10 @@ class KeyManagerTest {\n         ) { \"CertificateException was not handled correctly\" }\n \n         // Verify NoSuchAlgorithmException is handled\n-        every {\n-            mockPkcs12KeyStore.load(any(), any())\n-        } throws NoSuchAlgorithmException()\n+        val algorithmError = NoSuchAlgorithmException()\n+        every { mockPkcs12KeyStore.load(any(), any()) } throws algorithmError\n         assertEquals(\n-            ImportPrivateKeyResult.Error.UnsupportedKey,\n+            ImportPrivateKeyResult.Error.UnsupportedKey(throwable = algorithmError),\n             keyDiskSource.importMutualTlsCertificate(\n                 key = pkcs12Bytes,\n                 alias = expectedAlias,\n@@ -458,7 +463,9 @@ class KeyManagerTest {\n         }\n \n         assertEquals(\n-            ImportPrivateKeyResult.Error.UnsupportedKey,\n+            ImportPrivateKeyResult.Error.UnsupportedKey(\n+                throwable = MissingPropertyException(\"Internal Alias\"),\n+            ),\n             keyDiskSource.importMutualTlsCertificate(\n                 key = pkcs12Bytes,\n                 alias = expectedAlias,\n@@ -481,15 +488,16 @@ class KeyManagerTest {\n             every { hasMoreElements() } returns true\n             every { nextElement() } returns \"mockInternalAlias\"\n         }\n+        val error = UnrecoverableKeyException()\n         every {\n             mockPkcs12KeyStore.getKey(\n                 \"mockInternalAlias\",\n                 password.toCharArray(),\n             )\n-        } throws UnrecoverableKeyException()\n+        } throws error\n \n         assertEquals(\n-            ImportPrivateKeyResult.Error.UnrecoverableKey,\n+            ImportPrivateKeyResult.Error.UnrecoverableKey(throwable = error),\n             keyDiskSource.importMutualTlsCertificate(\n                 key = pkcs12Bytes,\n                 alias = expectedAlias,\n@@ -504,7 +512,9 @@ class KeyManagerTest {\n             )\n         } returns null\n         assertEquals(\n-            ImportPrivateKeyResult.Error.UnrecoverableKey,\n+            ImportPrivateKeyResult.Error.UnrecoverableKey(\n+                throwable = MissingPropertyException(\"Private Key\"),\n+            ),\n             keyDiskSource.importMutualTlsCertificate(\n                 key = pkcs12Bytes,\n                 alias = expectedAlias,\n@@ -537,7 +547,9 @@ class KeyManagerTest {\n             mockPkcs12KeyStore.getCertificateChain(\"mockInternalAlias\")\n         } returns emptyArray()\n         assertEquals(\n-            ImportPrivateKeyResult.Error.InvalidCertificateChain,\n+            ImportPrivateKeyResult.Error.InvalidCertificateChain(\n+                throwable = MissingPropertyException(\"Certificate Chain\"),\n+            ),\n             keyDiskSource.importMutualTlsCertificate(\n                 key = pkcs12Bytes,\n                 alias = expectedAlias,\n@@ -550,7 +562,9 @@ class KeyManagerTest {\n             mockPkcs12KeyStore.getCertificateChain(\"mockInternalAlias\")\n         } returns null\n         assertEquals(\n-            ImportPrivateKeyResult.Error.InvalidCertificateChain,\n+            ImportPrivateKeyResult.Error.InvalidCertificateChain(\n+                throwable = MissingPropertyException(\"Certificate Chain\"),\n+            ),\n             keyDiskSource.importMutualTlsCertificate(\n                 key = pkcs12Bytes,\n                 alias = expectedAlias,\n@@ -563,9 +577,11 @@ class KeyManagerTest {\n     @Test\n     fun `importMutualTlsCertificate should return KeyStoreOperationFailed when saving to Android KeyStore throws KeyStoreException`() {\n         setupMockAndroidKeyStore()\n+        setupMockPkcs12KeyStore()\n         val expectedAlias = \"mockAlias\"\n         val pkcs12Bytes = \"key.p12\".toByteArray()\n         val password = \"password\"\n+        val error = KeyStoreException()\n \n         every { mockPkcs12KeyStore.aliases() } returns mockk {\n             every { hasMoreElements() } returns true\n@@ -582,6 +598,8 @@ class KeyManagerTest {\n             mockPkcs12KeyStore.getCertificateChain(\"mockInternalAlias\")\n         } returns arrayOf(mockk())\n \n+        every { mockAndroidKeyStore.containsAlias(expectedAlias) } returns false\n+\n         every {\n             mockAndroidKeyStore.setKeyEntry(\n                 expectedAlias,\n@@ -589,10 +607,10 @@ class KeyManagerTest {\n                 any(),\n                 any(),\n             )\n-        } throws KeyStoreException()\n+        } throws error\n \n         assertEquals(\n-            ImportPrivateKeyResult.Error.KeyStoreOperationFailed,\n+            ImportPrivateKeyResult.Error.KeyStoreOperationFailed(throwable = error),\n             keyDiskSource.importMutualTlsCertificate(\n                 key = pkcs12Bytes,\n                 alias = expectedAlias,\ndiff --git a/app/src/test/java/com/x8bit/bitwarden/data/platform/repository/SettingsRepositoryTest.kt b/app/src/test/java/com/x8bit/bitwarden/data/platform/repository/SettingsRepositoryTest.kt\nindex 14e9eca5f94..c6e5269c2f8 100644\n--- a/app/src/test/java/com/x8bit/bitwarden/data/platform/repository/SettingsRepositoryTest.kt\n+++ b/app/src/test/java/com/x8bit/bitwarden/data/platform/repository/SettingsRepositoryTest.kt\n@@ -833,7 +833,7 @@ class SettingsRepositoryTest {\n \n             val result = settingsRepository.setupBiometricsKey(cipher = cipher)\n \n-            assertEquals(BiometricsKeyResult.Error, result)\n+            assertEquals(BiometricsKeyResult.Error(error = NoActiveUserException()), result)\n             coVerify(exactly = 0) {\n                 vaultSdkSource.getUserEncryptionKey(userId = any())\n             }\n@@ -845,13 +845,14 @@ class SettingsRepositoryTest {\n         runTest {\n             fakeAuthDiskSource.userState = MOCK_USER_STATE\n             val cipher = mockk<Cipher>()\n+            val error = Throwable(\"Fail\")\n             coEvery {\n                 vaultSdkSource.getUserEncryptionKey(userId = USER_ID)\n-            } returns Throwable(\"Fail\").asFailure()\n+            } returns error.asFailure()\n \n             val result = settingsRepository.setupBiometricsKey(cipher = cipher)\n \n-            assertEquals(BiometricsKeyResult.Error, result)\n+            assertEquals(BiometricsKeyResult.Error(error = error), result)\n             coVerify(exactly = 1) {\n                 vaultSdkSource.getUserEncryptionKey(userId = USER_ID)\n             }\ndiff --git a/app/src/test/java/com/x8bit/bitwarden/data/vault/manager/CipherManagerTest.kt b/app/src/test/java/com/x8bit/bitwarden/data/vault/manager/CipherManagerTest.kt\nindex 6f3293df760..a3c124eec34 100644\n--- a/app/src/test/java/com/x8bit/bitwarden/data/vault/manager/CipherManagerTest.kt\n+++ b/app/src/test/java/com/x8bit/bitwarden/data/vault/manager/CipherManagerTest.kt\n@@ -1857,10 +1857,9 @@ class CipherManagerTest {\n         coEvery {\n             ciphersService.getCipherAttachment(cipherId = any(), attachmentId = any())\n         } returns response.asSuccess()\n-\n         coEvery {\n             fileManager.downloadFileToCache(url = any())\n-        } returns DownloadResult.Failure\n+        } returns DownloadResult.Failure(error = Throwable(\"Fail!\"))\n \n         assertEquals(\n             DownloadAttachmentResult.Failure(IllegalStateException()),\ndiff --git a/app/src/test/java/com/x8bit/bitwarden/ui/auth/feature/accountsetup/SetupUnlockViewModelTest.kt b/app/src/test/java/com/x8bit/bitwarden/ui/auth/feature/accountsetup/SetupUnlockViewModelTest.kt\nindex aa6e65689ca..95be41185d6 100644\n--- a/app/src/test/java/com/x8bit/bitwarden/ui/auth/feature/accountsetup/SetupUnlockViewModelTest.kt\n+++ b/app/src/test/java/com/x8bit/bitwarden/ui/auth/feature/accountsetup/SetupUnlockViewModelTest.kt\n@@ -169,7 +169,7 @@ class SetupUnlockViewModelTest : BaseViewModelTest() {\n         runTest {\n             coEvery {\n                 settingsRepository.setupBiometricsKey(CIPHER)\n-            } returns BiometricsKeyResult.Error\n+            } returns BiometricsKeyResult.Error(error = Throwable(\"Fail!\"))\n             val viewModel = createViewModel()\n \n             viewModel.stateFlow.test {\ndiff --git a/app/src/test/java/com/x8bit/bitwarden/ui/auth/feature/environment/EnvironmentViewModelTest.kt b/app/src/test/java/com/x8bit/bitwarden/ui/auth/feature/environment/EnvironmentViewModelTest.kt\nindex 4cde15cfe92..c5d94f1aacf 100644\n--- a/app/src/test/java/com/x8bit/bitwarden/ui/auth/feature/environment/EnvironmentViewModelTest.kt\n+++ b/app/src/test/java/com/x8bit/bitwarden/ui/auth/feature/environment/EnvironmentViewModelTest.kt\n@@ -519,7 +519,9 @@ class EnvironmentViewModelTest : BaseViewModelTest() {\n         viewModel.eventFlow.test {\n             viewModel.trySendAction(\n                 EnvironmentAction.Internal.ImportKeyResultReceive(\n-                    result = ImportPrivateKeyResult.Error.UnsupportedKey,\n+                    result = ImportPrivateKeyResult.Error.UnsupportedKey(\n+                        throwable = Throwable(\"Fail!\"),\n+                    ),\n                 ),\n             )\n             assertEquals(\n@@ -529,7 +531,9 @@ class EnvironmentViewModelTest : BaseViewModelTest() {\n \n             viewModel.trySendAction(\n                 EnvironmentAction.Internal.ImportKeyResultReceive(\n-                    result = ImportPrivateKeyResult.Error.KeyStoreOperationFailed,\n+                    result = ImportPrivateKeyResult.Error.KeyStoreOperationFailed(\n+                        throwable = Throwable(\"Fail!\"),\n+                    ),\n                 ),\n             )\n             assertEquals(\n@@ -539,7 +543,9 @@ class EnvironmentViewModelTest : BaseViewModelTest() {\n \n             viewModel.trySendAction(\n                 EnvironmentAction.Internal.ImportKeyResultReceive(\n-                    result = ImportPrivateKeyResult.Error.UnrecoverableKey,\n+                    result = ImportPrivateKeyResult.Error.UnrecoverableKey(\n+                        throwable = Throwable(\"Fail!\"),\n+                    ),\n                 ),\n             )\n             assertEquals(\n@@ -549,7 +555,9 @@ class EnvironmentViewModelTest : BaseViewModelTest() {\n \n             viewModel.trySendAction(\n                 EnvironmentAction.Internal.ImportKeyResultReceive(\n-                    result = ImportPrivateKeyResult.Error.InvalidCertificateChain,\n+                    result = ImportPrivateKeyResult.Error.InvalidCertificateChain(\n+                        throwable = Throwable(\"Fail!\"),\n+                    ),\n                 ),\n             )\n             assertEquals(\ndiff --git a/app/src/test/java/com/x8bit/bitwarden/ui/platform/feature/settings/accountsecurity/AccountSecurityViewModelTest.kt b/app/src/test/java/com/x8bit/bitwarden/ui/platform/feature/settings/accountsecurity/AccountSecurityViewModelTest.kt\nindex 340d1b4a534..9b467010bbc 100644\n--- a/app/src/test/java/com/x8bit/bitwarden/ui/platform/feature/settings/accountsecurity/AccountSecurityViewModelTest.kt\n+++ b/app/src/test/java/com/x8bit/bitwarden/ui/platform/feature/settings/accountsecurity/AccountSecurityViewModelTest.kt\n@@ -589,7 +589,7 @@ class AccountSecurityViewModelTest : BaseViewModelTest() {\n         runTest {\n             coEvery {\n                 settingsRepository.setupBiometricsKey(cipher = CIPHER)\n-            } returns BiometricsKeyResult.Error\n+            } returns BiometricsKeyResult.Error(error = Throwable(\"Fail!\"))\n             val viewModel = createViewModel()\n \n             viewModel.stateFlow.test {\n", "problem_statement": "PM-19334: Propagate errors to the UI\n## Objective\nThis PR propagates the remain non-generator errors to the UI.", "hints_text": "", "created_at": "2025-03-18T16:06:44Z"}
{"repo": "bitwarden/android", "pull_number": 4891, "instance_id": "bitwarden__android-4891", "issue_numbers": [], "base_commit": "ef3b7730d0b072eaf5d2bff9bd1d628e0842234b", "patch": "diff --git a/authenticator/src/main/kotlin/com/bitwarden/authenticator/ui/authenticator/feature/itemlisting/ItemListingScreen.kt b/authenticator/src/main/kotlin/com/bitwarden/authenticator/ui/authenticator/feature/itemlisting/ItemListingScreen.kt\nindex 2ca2bf1043f..8c6c45583ec 100644\n--- a/authenticator/src/main/kotlin/com/bitwarden/authenticator/ui/authenticator/feature/itemlisting/ItemListingScreen.kt\n+++ b/authenticator/src/main/kotlin/com/bitwarden/authenticator/ui/authenticator/feature/itemlisting/ItemListingScreen.kt\n@@ -31,10 +31,7 @@ import androidx.compose.material3.TopAppBarScrollBehavior\n import androidx.compose.material3.rememberTopAppBarState\n import androidx.compose.runtime.Composable\n import androidx.compose.runtime.getValue\n-import androidx.compose.runtime.mutableStateOf\n import androidx.compose.runtime.remember\n-import androidx.compose.runtime.saveable.rememberSaveable\n-import androidx.compose.runtime.setValue\n import androidx.compose.ui.Alignment\n import androidx.compose.ui.Modifier\n import androidx.compose.ui.input.nestedscroll.nestedScroll\n@@ -100,12 +97,11 @@ fun ItemListingScreen(\n     val state by viewModel.stateFlow.collectAsStateWithLifecycle()\n     val scrollBehavior = TopAppBarDefaults.pinnedScrollBehavior(rememberTopAppBarState())\n     val context = LocalContext.current\n-    var shouldShowPermissionDialog by rememberSaveable { mutableStateOf(false) }\n     val launcher = permissionsManager.getLauncher { isGranted ->\n         if (isGranted) {\n             viewModel.trySendAction(ItemListingAction.ScanQrCodeClick)\n         } else {\n-            shouldShowPermissionDialog = true\n+            viewModel.trySendAction(ItemListingAction.EnterSetupKeyClick)\n         }\n     }\n     val snackbarHostState = remember { SnackbarHostState() }\n@@ -151,20 +147,6 @@ fun ItemListingScreen(\n         }\n     }\n \n-    if (shouldShowPermissionDialog) {\n-        BitwardenTwoButtonDialog(\n-            message = stringResource(id = R.string.enable_camera_permission_to_use_the_scanner),\n-            confirmButtonText = stringResource(id = R.string.settings),\n-            dismissButtonText = stringResource(id = R.string.no_thanks),\n-            onConfirmClick = remember(viewModel) {\n-                { viewModel.trySendAction(ItemListingAction.SettingsClick) }\n-            },\n-            onDismissClick = { shouldShowPermissionDialog = false },\n-            onDismissRequest = { shouldShowPermissionDialog = false },\n-            title = null,\n-        )\n-    }\n-\n     ItemListingDialogs(\n         dialog = state.dialog,\n         onDismissRequest = remember(viewModel) {\n@@ -258,7 +240,7 @@ fun ItemListingScreen(\n                         launcher.launch(Manifest.permission.CAMERA)\n                     }\n                 },\n-                onScanQuCodeClick = remember(viewModel) {\n+                onScanQrCodeClick = remember(viewModel) {\n                     {\n                         launcher.launch(Manifest.permission.CAMERA)\n                     }\n@@ -580,7 +562,7 @@ fun EmptyItemListingContent(\n         rememberTopAppBarState(),\n     ),\n     onAddCodeClick: () -> Unit,\n-    onScanQuCodeClick: () -> Unit,\n+    onScanQrCodeClick: () -> Unit,\n     onEnterSetupKeyClick: () -> Unit,\n     onDownloadBitwardenClick: () -> Unit,\n     onDismissDownloadBitwardenClick: () -> Unit,\n@@ -613,7 +595,7 @@ fun EmptyItemListingContent(\n                             contentDescription = stringResource(id = R.string.scan_a_qr_code),\n                             testTag = \"ScanQRCodeButton\",\n                         ),\n-                        onScanQrCodeClick = onScanQuCodeClick,\n+                        onScanQrCodeClick = onScanQrCodeClick,\n                     ),\n                     ItemListingExpandableFabAction.EnterSetupKey(\n                         label = R.string.enter_key_manually.asText(),\n@@ -783,7 +765,7 @@ private fun EmptyListingContentPreview() {\n         modifier = Modifier.padding(horizontal = 16.dp),\n         appTheme = AppTheme.DEFAULT,\n         onAddCodeClick = { },\n-        onScanQuCodeClick = { },\n+        onScanQrCodeClick = { },\n         onEnterSetupKeyClick = { },\n         actionCardState = ItemListingState.ActionCardState.DownloadBitwardenApp,\n         onDownloadBitwardenClick = { },\n", "test_patch": "diff --git a/authenticator/src/test/java/com/bitwarden/authenticator/ui/authenticator/feature/itemlisting/ItemListingScreenTest.kt b/authenticator/src/test/java/com/bitwarden/authenticator/ui/authenticator/feature/itemlisting/ItemListingScreenTest.kt\nindex ced58fe8f4f..8e282279c64 100644\n--- a/authenticator/src/test/java/com/bitwarden/authenticator/ui/authenticator/feature/itemlisting/ItemListingScreenTest.kt\n+++ b/authenticator/src/test/java/com/bitwarden/authenticator/ui/authenticator/feature/itemlisting/ItemListingScreenTest.kt\n@@ -63,6 +63,38 @@ class ItemListingScreenTest : BaseComposeTest() {\n         }\n     }\n \n+    @Test\n+    @Suppress(\"MaxLineLength\")\n+    fun `when denying camera permissions and attempting to add a code we should be shown the manual entry screen`() {\n+        permissionsManager.getPermissionsResult = false\n+\n+        composeTestRule\n+            .onNodeWithText(\"Add code\")\n+            .performClick()\n+\n+        verify {\n+            viewModel.trySendAction(\n+                ItemListingAction.EnterSetupKeyClick,\n+            )\n+        }\n+    }\n+\n+    @Test\n+    @Suppress(\"MaxLineLength\")\n+    fun `when allowing camera permissions and attempting to add a code we should be shown the scan QR code screen`() {\n+        permissionsManager.getPermissionsResult = true\n+\n+        composeTestRule\n+            .onNodeWithText(\"Add code\")\n+            .performClick()\n+\n+        verify {\n+            viewModel.trySendAction(\n+                ItemListingAction.ScanQrCodeClick,\n+            )\n+        }\n+    }\n+\n     @Test\n     @Suppress(\"MaxLineLength\")\n     fun `shared accounts error message should show when view is Content with SharedCodesDisplayState Error`() {\n", "problem_statement": "BWA-119 - Unable to Access Manual Code Entry After Denying Camera Permissions on\n## Objective\n- The issue was that the manual entry screen was not being displayed when attempting to add a new code. Instead, a dialog prompted the user to open Settings, but upon dismissing the dialog, they remained on the same tab.\r\n- After discussing with Luke, we determined that the expected behavior should match iOS, which does not display a dialog. Instead, if permissions are not granted, the manual entry screen should be shown directly.  This also follows the flow of the Password Manager android app.\r\n- Fixed typo in `onScanQrCodeClick`", "hints_text": "", "created_at": "2025-03-18T13:51:44Z"}
{"repo": "bitwarden/android", "pull_number": 4888, "instance_id": "bitwarden__android-4888", "issue_numbers": [], "base_commit": "72c9149d27ef737f520e2f5592e39e949a855515", "patch": "diff --git a/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/AuthRepositoryImpl.kt b/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/AuthRepositoryImpl.kt\nindex 45ddd8b0fc6..4e059e4fa0b 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/AuthRepositoryImpl.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/AuthRepositoryImpl.kt\n@@ -775,7 +775,7 @@ class AuthRepositoryImpl(\n     override suspend fun requestOneTimePasscode(): RequestOtpResult =\n         accountsService.requestOneTimePasscode()\n             .fold(\n-                onFailure = { RequestOtpResult.Error(it.message) },\n+                onFailure = { RequestOtpResult.Error(message = it.message, error = it) },\n                 onSuccess = { RequestOtpResult.Success },\n             )\n \n@@ -785,7 +785,7 @@ class AuthRepositoryImpl(\n                 passcode = oneTimePasscode,\n             )\n             .fold(\n-                onFailure = { VerifyOtpResult.NotVerified(it.message) },\n+                onFailure = { VerifyOtpResult.NotVerified(errorMessage = it.message, error = it) },\n                 onSuccess = { VerifyOtpResult.Verified },\n             )\n \n@@ -793,21 +793,27 @@ class AuthRepositoryImpl(\n         resendEmailRequestJson\n             ?.let { jsonRequest ->\n                 accountsService.resendVerificationCodeEmail(body = jsonRequest).fold(\n-                    onFailure = { ResendEmailResult.Error(message = it.message) },\n+                    onFailure = { ResendEmailResult.Error(message = it.message, error = it) },\n                     onSuccess = { ResendEmailResult.Success },\n                 )\n             }\n-            ?: ResendEmailResult.Error(message = null)\n+            ?: ResendEmailResult.Error(\n+                message = null,\n+                error = MissingPropertyException(\"Resend Email Request\"),\n+            )\n \n     override suspend fun resendNewDeviceOtp(): ResendEmailResult =\n         resendNewDeviceOtpRequestJson\n             ?.let { jsonRequest ->\n                 accountsService.resendNewDeviceOtp(body = jsonRequest).fold(\n-                    onFailure = { ResendEmailResult.Error(message = it.message) },\n+                    onFailure = { ResendEmailResult.Error(message = it.message, error = it) },\n                     onSuccess = { ResendEmailResult.Success },\n                 )\n             }\n-            ?: ResendEmailResult.Error(message = null)\n+            ?: ResendEmailResult.Error(\n+                message = null,\n+                error = MissingPropertyException(\"Resend New Device OTP Request\"),\n+            )\n \n     override fun switchAccount(userId: String): SwitchAccountResult {\n         val currentUserState = authDiskSource.userState ?: return SwitchAccountResult.NoChange\n@@ -1196,7 +1202,7 @@ class AuthRepositoryImpl(\n                     verifiedOrganizationDomainSsoDetails = it.verifiedOrganizationDomainSsoDetails,\n                 )\n             },\n-            onFailure = { VerifiedOrganizationDomainSsoDetailsResult.Failure },\n+            onFailure = { VerifiedOrganizationDomainSsoDetailsResult.Failure(error = it) },\n         )\n \n     override suspend fun prevalidateSso(\n@@ -1315,10 +1321,12 @@ class AuthRepositoryImpl(\n             .userState\n             ?.activeAccount\n             ?.profile\n-            ?: return ValidatePinResult.Error\n+            ?: return ValidatePinResult.Error(error = NoActiveUserException())\n         val pinProtectedUserKey = authDiskSource\n             .getPinProtectedUserKey(userId = activeAccount.userId)\n-            ?: return ValidatePinResult.Error\n+            ?: return ValidatePinResult.Error(\n+                error = MissingPropertyException(\"Pin Protected User Key\"),\n+            )\n         return vaultSdkSource\n             .validatePin(\n                 userId = activeAccount.userId,\n@@ -1327,7 +1335,7 @@ class AuthRepositoryImpl(\n             )\n             .fold(\n                 onSuccess = { ValidatePinResult.Success(isValid = it) },\n-                onFailure = { ValidatePinResult.Error },\n+                onFailure = { ValidatePinResult.Error(error = it) },\n             )\n     }\n \n@@ -1353,7 +1361,10 @@ class AuthRepositoryImpl(\n                 onSuccess = {\n                     when (it) {\n                         is SendVerificationEmailResponseJson.Invalid -> {\n-                            SendVerificationEmailResult.Error(it.message)\n+                            SendVerificationEmailResult.Error(\n+                                errorMessage = it.message,\n+                                error = null,\n+                            )\n                         }\n \n                         is SendVerificationEmailResponseJson.Success -> {\n@@ -1361,9 +1372,7 @@ class AuthRepositoryImpl(\n                         }\n                     }\n                 },\n-                onFailure = {\n-                    SendVerificationEmailResult.Error(null)\n-                },\n+                onFailure = { SendVerificationEmailResult.Error(errorMessage = null, error = it) },\n             )\n \n     override suspend fun validateEmailToken(email: String, token: String): EmailTokenResult {\ndiff --git a/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/RequestOtpResult.kt b/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/RequestOtpResult.kt\nindex c0643f61c7a..8fec1f90d0f 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/RequestOtpResult.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/RequestOtpResult.kt\n@@ -13,5 +13,8 @@ sealed class RequestOtpResult {\n     /**\n      * Represents a failure to send the one-time passcode.\n      */\n-    data class Error(val message: String?) : RequestOtpResult()\n+    data class Error(\n+        val message: String?,\n+        val error: Throwable,\n+    ) : RequestOtpResult()\n }\ndiff --git a/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/ResendEmailResult.kt b/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/ResendEmailResult.kt\nindex 5375b1d5e4a..efd549ce40a 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/ResendEmailResult.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/ResendEmailResult.kt\n@@ -13,5 +13,8 @@ sealed class ResendEmailResult {\n     /**\n      * There was an error.\n      */\n-    data class Error(val message: String?) : ResendEmailResult()\n+    data class Error(\n+        val message: String?,\n+        val error: Throwable,\n+    ) : ResendEmailResult()\n }\ndiff --git a/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/SendVerificationEmailResult.kt b/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/SendVerificationEmailResult.kt\nindex 1c1ff789d9c..05733cb976a 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/SendVerificationEmailResult.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/SendVerificationEmailResult.kt\n@@ -18,5 +18,8 @@ sealed class SendVerificationEmailResult {\n      *\n      * @param errorMessage a message describing the error.\n      */\n-    data class Error(val errorMessage: String?) : SendVerificationEmailResult()\n+    data class Error(\n+        val errorMessage: String?,\n+        val error: Throwable?,\n+    ) : SendVerificationEmailResult()\n }\ndiff --git a/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/UserFingerprintResult.kt b/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/UserFingerprintResult.kt\nindex a40e5c4c3f1..1d3ee91fa3a 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/UserFingerprintResult.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/UserFingerprintResult.kt\n@@ -14,5 +14,7 @@ sealed class UserFingerprintResult {\n     /**\n      * There was an error getting the user fingerprint.\n      */\n-    data object Error : UserFingerprintResult()\n+    data class Error(\n+        val error: Throwable,\n+    ) : UserFingerprintResult()\n }\ndiff --git a/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/ValidatePinResult.kt b/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/ValidatePinResult.kt\nindex 1ecef76741c..5b21fc7d0c5 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/ValidatePinResult.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/ValidatePinResult.kt\n@@ -14,5 +14,7 @@ sealed class ValidatePinResult {\n     /**\n      * There was an error determining if the validity of the PIN.\n      */\n-    data object Error : ValidatePinResult()\n+    data class Error(\n+        val error: Throwable,\n+    ) : ValidatePinResult()\n }\ndiff --git a/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/VerifiedOrganizationDomainSsoDetailsResult.kt b/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/VerifiedOrganizationDomainSsoDetailsResult.kt\nindex bab8736663a..a2a4c9ce2d1 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/VerifiedOrganizationDomainSsoDetailsResult.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/VerifiedOrganizationDomainSsoDetailsResult.kt\n@@ -18,5 +18,7 @@ sealed class VerifiedOrganizationDomainSsoDetailsResult {\n     /**\n      * The request failed.\n      */\n-    data object Failure : VerifiedOrganizationDomainSsoDetailsResult()\n+    data class Failure(\n+        val error: Throwable,\n+    ) : VerifiedOrganizationDomainSsoDetailsResult()\n }\ndiff --git a/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/VerifyOtpResult.kt b/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/VerifyOtpResult.kt\nindex a182637d449..c8bfb0e8b2c 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/VerifyOtpResult.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/VerifyOtpResult.kt\n@@ -13,5 +13,8 @@ sealed class VerifyOtpResult {\n     /**\n      * Represents a failure to verify the one-time passcode.\n      */\n-    data class NotVerified(val errorMessage: String?) : VerifyOtpResult()\n+    data class NotVerified(\n+        val errorMessage: String?,\n+        val error: Throwable,\n+    ) : VerifyOtpResult()\n }\ndiff --git a/app/src/main/java/com/x8bit/bitwarden/data/platform/repository/SettingsRepositoryImpl.kt b/app/src/main/java/com/x8bit/bitwarden/data/platform/repository/SettingsRepositoryImpl.kt\nindex 03b22c0d2cd..13364b92694 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/data/platform/repository/SettingsRepositoryImpl.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/data/platform/repository/SettingsRepositoryImpl.kt\n@@ -10,6 +10,7 @@ import com.x8bit.bitwarden.data.auth.repository.util.policyInformation\n import com.x8bit.bitwarden.data.autofill.accessibility.manager.AccessibilityEnabledManager\n import com.x8bit.bitwarden.data.autofill.manager.AutofillEnabledManager\n import com.x8bit.bitwarden.data.platform.datasource.disk.SettingsDiskSource\n+import com.x8bit.bitwarden.data.platform.error.NoActiveUserException\n import com.x8bit.bitwarden.data.platform.manager.PolicyManager\n import com.x8bit.bitwarden.data.platform.manager.dispatcher.DispatcherManager\n import com.x8bit.bitwarden.data.platform.repository.model.BiometricsKeyResult\n@@ -380,12 +381,13 @@ class SettingsRepositoryImpl(\n     }\n \n     override suspend fun getUserFingerprint(): UserFingerprintResult {\n-        val userId = activeUserId ?: return UserFingerprintResult.Error\n+        val userId = activeUserId\n+            ?: return UserFingerprintResult.Error(error = NoActiveUserException())\n \n         return vaultSdkSource\n             .getUserFingerprint(userId)\n             .fold(\n-                onFailure = { UserFingerprintResult.Error },\n+                onFailure = { UserFingerprintResult.Error(error = it) },\n                 onSuccess = { UserFingerprintResult.Success(it) },\n             )\n     }\ndiff --git a/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/startregistration/StartRegistrationScreen.kt b/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/startregistration/StartRegistrationScreen.kt\nindex acb00853aa1..fc32a7def4c 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/startregistration/StartRegistrationScreen.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/startregistration/StartRegistrationScreen.kt\n@@ -134,6 +134,7 @@ fun StartRegistrationScreen(\n             BitwardenBasicDialog(\n                 title = dialog.title?.invoke(),\n                 message = dialog.message(),\n+                throwable = dialog.error,\n                 onDismissRequest = remember(viewModel) {\n                     { viewModel.trySendAction(ErrorDialogDismiss) }\n                 },\ndiff --git a/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/startregistration/StartRegistrationViewModel.kt b/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/startregistration/StartRegistrationViewModel.kt\nindex c0aaca0ea8a..b89b7165dfe 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/startregistration/StartRegistrationViewModel.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/startregistration/StartRegistrationViewModel.kt\n@@ -246,7 +246,6 @@ class StartRegistrationViewModel @Inject constructor(\n         result: ReceiveSendVerificationEmailResult,\n     ) {\n         when (val sendVerificationEmailResult = result.sendVerificationEmailResult) {\n-\n             is SendVerificationEmailResult.Error -> {\n                 mutableStateFlow.update {\n                     it.copy(\n@@ -256,6 +255,7 @@ class StartRegistrationViewModel @Inject constructor(\n                                 .errorMessage\n                                 ?.asText()\n                                 ?: R.string.generic_error_message.asText(),\n+                            error = sendVerificationEmailResult.error,\n                         ),\n                     )\n                 }\n@@ -314,6 +314,7 @@ sealed class StartRegistrationDialog : Parcelable {\n     data class Error(\n         val title: Text?,\n         val message: Text,\n+        val error: Throwable? = null,\n     ) : StartRegistrationDialog()\n }\n \ndiff --git a/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/twofactorlogin/TwoFactorLoginViewModel.kt b/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/twofactorlogin/TwoFactorLoginViewModel.kt\nindex e7d29ec7ac2..8ddeffc7f30 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/twofactorlogin/TwoFactorLoginViewModel.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/twofactorlogin/TwoFactorLoginViewModel.kt\n@@ -430,7 +430,7 @@ class TwoFactorLoginViewModel @Inject constructor(\n         // Dismiss the loading overlay.\n         mutableStateFlow.update { it.copy(dialogState = null) }\n \n-        when (action.resendEmailResult) {\n+        when (val result = action.resendEmailResult) {\n             // Display a dialog for an error result.\n             is ResendEmailResult.Error -> {\n                 mutableStateFlow.update {\n@@ -438,6 +438,7 @@ class TwoFactorLoginViewModel @Inject constructor(\n                         dialogState = TwoFactorLoginState.DialogState.Error(\n                             title = R.string.an_error_has_occurred.asText(),\n                             message = R.string.verification_email_not_sent.asText(),\n+                            error = result.error,\n                         ),\n                     )\n                 }\ndiff --git a/app/src/main/java/com/x8bit/bitwarden/ui/platform/feature/settings/accountsecurity/deleteaccountconfirmation/DeleteAccountConfirmationViewModel.kt b/app/src/main/java/com/x8bit/bitwarden/ui/platform/feature/settings/accountsecurity/deleteaccountconfirmation/DeleteAccountConfirmationViewModel.kt\nindex b24e621c8aa..47d2f6face1 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/ui/platform/feature/settings/accountsecurity/deleteaccountconfirmation/DeleteAccountConfirmationViewModel.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/ui/platform/feature/settings/accountsecurity/deleteaccountconfirmation/DeleteAccountConfirmationViewModel.kt\n@@ -132,10 +132,11 @@ class DeleteAccountConfirmationViewModel @Inject constructor(\n     ) {\n         mutableStateFlow.update {\n             it.copy(\n-                dialog = when (action.requestOtpResult) {\n+                dialog = when (val result = action.requestOtpResult) {\n                     is RequestOtpResult.Error -> {\n                         DeleteAccountConfirmationState.DeleteAccountConfirmationDialog.Error(\n                             message = R.string.generic_error_message.asText(),\n+                            error = result.error,\n                         )\n                     }\n \ndiff --git a/app/src/main/java/com/x8bit/bitwarden/ui/platform/feature/settings/exportvault/ExportVaultViewModel.kt b/app/src/main/java/com/x8bit/bitwarden/ui/platform/feature/settings/exportvault/ExportVaultViewModel.kt\nindex 6aafa06a15b..23a94a19ccc 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/ui/platform/feature/settings/exportvault/ExportVaultViewModel.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/ui/platform/feature/settings/exportvault/ExportVaultViewModel.kt\n@@ -403,11 +403,14 @@ class ExportVaultViewModel @Inject constructor(\n     private fun handleReceiveVerifyOneTimePasscodeResult(\n         action: ExportVaultAction.Internal.ReceiveVerifyOneTimePasscodeResult,\n     ) {\n-        when (action.result) {\n+        when (val result = action.result) {\n             VerifyOtpResult.Verified -> exportVaultData()\n \n             is VerifyOtpResult.NotVerified -> {\n-                updateStateWithError(R.string.generic_error_message.asText())\n+                updateStateWithError(\n+                    message = R.string.generic_error_message.asText(),\n+                    error = result.error,\n+                )\n             }\n         }\n     }\ndiff --git a/app/src/main/java/com/x8bit/bitwarden/ui/vault/feature/addedit/VaultAddEditViewModel.kt b/app/src/main/java/com/x8bit/bitwarden/ui/vault/feature/addedit/VaultAddEditViewModel.kt\nindex 65189b07586..0b52c579f90 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/ui/vault/feature/addedit/VaultAddEditViewModel.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/ui/vault/feature/addedit/VaultAddEditViewModel.kt\n@@ -1862,7 +1862,7 @@ class VaultAddEditViewModel @Inject constructor(\n         clearDialogState()\n \n         when (action.result) {\n-            ValidatePinResult.Error -> {\n+            is ValidatePinResult.Error -> {\n                 showFido2ErrorDialog()\n             }\n \ndiff --git a/app/src/main/java/com/x8bit/bitwarden/ui/vault/feature/itemlisting/VaultItemListingViewModel.kt b/app/src/main/java/com/x8bit/bitwarden/ui/vault/feature/itemlisting/VaultItemListingViewModel.kt\nindex 0562a50a216..7a325ea6881 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/ui/vault/feature/itemlisting/VaultItemListingViewModel.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/ui/vault/feature/itemlisting/VaultItemListingViewModel.kt\n@@ -1409,7 +1409,7 @@ class VaultItemListingViewModel @Inject constructor(\n         clearDialogState()\n \n         when (action.result) {\n-            ValidatePinResult.Error -> {\n+            is ValidatePinResult.Error -> {\n                 showFido2UserVerificationErrorDialog()\n             }\n \n", "test_patch": "diff --git a/app/src/test/java/com/x8bit/bitwarden/data/auth/repository/AuthRepositoryTest.kt b/app/src/test/java/com/x8bit/bitwarden/data/auth/repository/AuthRepositoryTest.kt\nindex 0a6e1cde8a4..b529c94d055 100644\n--- a/app/src/test/java/com/x8bit/bitwarden/data/auth/repository/AuthRepositoryTest.kt\n+++ b/app/src/test/java/com/x8bit/bitwarden/data/auth/repository/AuthRepositoryTest.kt\n@@ -5422,12 +5422,12 @@ class AuthRepositoryTest {\n     @Test\n     fun `getVerifiedOrganizationDomainSsoDetails Failure should return Failure `() = runTest {\n         val email = \"test@gmail.com\"\n-        val throwable = Throwable()\n+        val throwable = Throwable(\"Fail!\")\n         coEvery {\n             organizationService.getVerifiedOrganizationDomainSsoDetails(email)\n         } returns throwable.asFailure()\n         val result = repository.getVerifiedOrganizationDomainSsoDetails(email)\n-        assertEquals(VerifiedOrganizationDomainSsoDetailsResult.Failure, result)\n+        assertEquals(VerifiedOrganizationDomainSsoDetailsResult.Failure(error = throwable), result)\n     }\n \n     @Test\n@@ -5499,13 +5499,14 @@ class AuthRepositoryTest {\n     @Test\n     fun `requestOneTimePasscode with error response should return Error`() = runTest {\n         val errorMessage = \"Error message\"\n+        val error = Throwable(errorMessage)\n         coEvery {\n             accountsService.requestOneTimePasscode()\n-        } returns Throwable(errorMessage).asFailure()\n+        } returns error.asFailure()\n \n         val result = repository.requestOneTimePasscode()\n \n-        assertEquals(RequestOtpResult.Error(errorMessage), result)\n+        assertEquals(RequestOtpResult.Error(message = errorMessage, error = error), result)\n     }\n \n     @Test\n@@ -5524,13 +5525,17 @@ class AuthRepositoryTest {\n     fun `verifyOneTimePasscode with error response should return NotVerified result`() = runTest {\n         val errorMessage = \"Error message\"\n         val passcode = \"passcode\"\n+        val error = Throwable(errorMessage)\n         coEvery {\n             accountsService.verifyOneTimePasscode(passcode)\n-        } returns Throwable(errorMessage).asFailure()\n+        } returns error.asFailure()\n \n         val result = repository.verifyOneTimePasscode(passcode)\n \n-        assertEquals(VerifyOtpResult.NotVerified(errorMessage), result)\n+        assertEquals(\n+            VerifyOtpResult.NotVerified(errorMessage = errorMessage, error = error),\n+            result,\n+        )\n     }\n \n     @Test\n@@ -5599,7 +5604,13 @@ class AuthRepositoryTest {\n     @Test\n     fun `resendVerificationCodeEmail returns error if no request data cached`() = runTest {\n         val result = repository.resendVerificationCodeEmail()\n-        assertEquals(ResendEmailResult.Error(message = null), result)\n+        assertEquals(\n+            ResendEmailResult.Error(\n+                message = null,\n+                error = MissingPropertyException(\"Resend Email Request\"),\n+            ),\n+            result,\n+        )\n     }\n \n     @Test\n@@ -5971,7 +5982,7 @@ class AuthRepositoryTest {\n         val result = repository.validatePin(pin = pin)\n \n         assertEquals(\n-            ValidatePinResult.Error,\n+            ValidatePinResult.Error(error = NoActiveUserException()),\n             result,\n         )\n     }\n@@ -5989,7 +6000,7 @@ class AuthRepositoryTest {\n             val result = repository.validatePin(pin = pin)\n \n             assertEquals(\n-                ValidatePinResult.Error,\n+                ValidatePinResult.Error(MissingPropertyException(\"Pin Protected User Key\")),\n                 result,\n             )\n         }\n@@ -5998,6 +6009,7 @@ class AuthRepositoryTest {\n     fun `validatePin returns ValidatePinResult Error when SDK validatePin fails`() = runTest {\n         val pin = \"PIN\"\n         val pinProtectedUserKey = \"pinProtectedUserKey\"\n+        val error = Throwable(\"Fail!\")\n         fakeAuthDiskSource.userState = SINGLE_USER_STATE_1\n         fakeAuthDiskSource.storePinProtectedUserKey(\n             userId = SINGLE_USER_STATE_1.activeUserId,\n@@ -6009,12 +6021,12 @@ class AuthRepositoryTest {\n                 pin = pin,\n                 pinProtectedUserKey = pinProtectedUserKey,\n             )\n-        } returns Throwable().asFailure()\n+        } returns error.asFailure()\n \n         val result = repository.validatePin(pin = pin)\n \n         assertEquals(\n-            ValidatePinResult.Error,\n+            ValidatePinResult.Error(error = error),\n             result,\n         )\n         coVerify(exactly = 1) {\n@@ -6226,7 +6238,7 @@ class AuthRepositoryTest {\n             receiveMarketingEmails = true,\n         )\n         assertEquals(\n-            SendVerificationEmailResult.Error(errorMessage = errorMessage),\n+            SendVerificationEmailResult.Error(errorMessage = errorMessage, error = null),\n             result,\n         )\n     }\n@@ -6279,6 +6291,7 @@ class AuthRepositoryTest {\n \n     @Test\n     fun `sendVerificationEmail failure should return error`() = runTest {\n+        val error = Throwable(\"fail\")\n         coEvery {\n             identityService.sendVerificationEmail(\n                 SendVerificationEmailRequestJson(\n@@ -6287,7 +6300,7 @@ class AuthRepositoryTest {\n                     receiveMarketingEmails = true,\n                 ),\n             )\n-        } returns Throwable(\"fail\").asFailure()\n+        } returns error.asFailure()\n \n         val result = repository.sendVerificationEmail(\n             email = EMAIL,\n@@ -6295,7 +6308,7 @@ class AuthRepositoryTest {\n             receiveMarketingEmails = true,\n         )\n         assertEquals(\n-            SendVerificationEmailResult.Error(null),\n+            SendVerificationEmailResult.Error(errorMessage = null, error = error),\n             result,\n         )\n     }\ndiff --git a/app/src/test/java/com/x8bit/bitwarden/data/platform/repository/SettingsRepositoryTest.kt b/app/src/test/java/com/x8bit/bitwarden/data/platform/repository/SettingsRepositoryTest.kt\nindex decb6a3769a..14e9eca5f94 100644\n--- a/app/src/test/java/com/x8bit/bitwarden/data/platform/repository/SettingsRepositoryTest.kt\n+++ b/app/src/test/java/com/x8bit/bitwarden/data/platform/repository/SettingsRepositoryTest.kt\n@@ -17,6 +17,7 @@ import com.x8bit.bitwarden.data.autofill.manager.AutofillEnabledManager\n import com.x8bit.bitwarden.data.autofill.manager.AutofillEnabledManagerImpl\n import com.x8bit.bitwarden.data.platform.base.FakeDispatcherManager\n import com.x8bit.bitwarden.data.platform.datasource.disk.util.FakeSettingsDiskSource\n+import com.x8bit.bitwarden.data.platform.error.NoActiveUserException\n import com.x8bit.bitwarden.data.platform.manager.PolicyManager\n import com.x8bit.bitwarden.data.platform.repository.model.BiometricsKeyResult\n import com.x8bit.bitwarden.data.platform.repository.model.ClearClipboardFrequency\n@@ -36,14 +37,18 @@ import io.mockk.coVerify\n import io.mockk.every\n import io.mockk.just\n import io.mockk.mockk\n+import io.mockk.mockkConstructor\n import io.mockk.runs\n+import io.mockk.unmockkConstructor\n import io.mockk.verify\n import kotlinx.coroutines.test.runTest\n+import org.junit.jupiter.api.AfterEach\n import org.junit.jupiter.api.Assertions.assertEquals\n import org.junit.jupiter.api.Assertions.assertFalse\n import org.junit.jupiter.api.Assertions.assertNotNull\n import org.junit.jupiter.api.Assertions.assertNull\n import org.junit.jupiter.api.Assertions.assertTrue\n+import org.junit.jupiter.api.BeforeEach\n import org.junit.jupiter.api.Test\n import java.time.Instant\n import java.time.ZonedDateTime\n@@ -77,6 +82,19 @@ class SettingsRepositoryTest {\n         policyManager = policyManager,\n     )\n \n+    @BeforeEach\n+    fun setup() {\n+        mockkConstructor(NoActiveUserException::class)\n+        every {\n+            anyConstructed<NoActiveUserException>() == any<NoActiveUserException>()\n+        } returns true\n+    }\n+\n+    @AfterEach\n+    fun tearDown() {\n+        unmockkConstructor(NoActiveUserException::class)\n+    }\n+\n     @Test\n     fun `setDefaultsIfNecessary should set LOCK default values for the given user if necessary`() {\n         assertNull(fakeSettingsDiskSource.getVaultTimeoutInMinutes(userId = USER_ID))\n@@ -743,23 +761,24 @@ class SettingsRepositoryTest {\n \n         val result = settingsRepository.getUserFingerprint()\n \n-        assertEquals(UserFingerprintResult.Error, result)\n+        assertEquals(UserFingerprintResult.Error(error = NoActiveUserException()), result)\n     }\n \n     @Test\n     fun `getUserFingerprint should return failure with active user when source returns failure`() =\n         runTest {\n+            val error = Throwable(\"Fail!\")\n             fakeAuthDiskSource.userState = MOCK_USER_STATE\n             coEvery {\n                 vaultSdkSource.getUserFingerprint(userId = USER_ID)\n-            } returns Throwable().asFailure()\n+            } returns error.asFailure()\n \n             val result = settingsRepository.getUserFingerprint()\n \n             coVerify(exactly = 1) {\n                 vaultSdkSource.getUserFingerprint(userId = USER_ID)\n             }\n-            assertEquals(UserFingerprintResult.Error, result)\n+            assertEquals(UserFingerprintResult.Error(error = error), result)\n         }\n \n     @Test\ndiff --git a/app/src/test/java/com/x8bit/bitwarden/ui/auth/feature/enterprisesignon/EnterpriseSignOnViewModelTest.kt b/app/src/test/java/com/x8bit/bitwarden/ui/auth/feature/enterprisesignon/EnterpriseSignOnViewModelTest.kt\nindex b85a15190bd..ebe81e33426 100644\n--- a/app/src/test/java/com/x8bit/bitwarden/ui/auth/feature/enterprisesignon/EnterpriseSignOnViewModelTest.kt\n+++ b/app/src/test/java/com/x8bit/bitwarden/ui/auth/feature/enterprisesignon/EnterpriseSignOnViewModelTest.kt\n@@ -985,7 +985,7 @@ class EnterpriseSignOnViewModelTest : BaseViewModelTest() {\n         runTest {\n             coEvery {\n                 authRepository.getVerifiedOrganizationDomainSsoDetails(any())\n-            } returns VerifiedOrganizationDomainSsoDetailsResult.Failure\n+            } returns VerifiedOrganizationDomainSsoDetailsResult.Failure(error = Throwable(\"Fail!\"))\n \n             coEvery {\n                 featureFlagManager.getFeatureFlag(FlagKey.VerifiedSsoDomainEndpoint)\ndiff --git a/app/src/test/java/com/x8bit/bitwarden/ui/auth/feature/startregistration/StartRegistrationViewModelTest.kt b/app/src/test/java/com/x8bit/bitwarden/ui/auth/feature/startregistration/StartRegistrationViewModelTest.kt\nindex 404553d3f2c..6d2563109ad 100644\n--- a/app/src/test/java/com/x8bit/bitwarden/ui/auth/feature/startregistration/StartRegistrationViewModelTest.kt\n+++ b/app/src/test/java/com/x8bit/bitwarden/ui/auth/feature/startregistration/StartRegistrationViewModelTest.kt\n@@ -189,6 +189,7 @@ class StartRegistrationViewModelTest : BaseViewModelTest() {\n \n     @Test\n     fun `ContinueClick register returns error should update errorDialogState`() = runTest {\n+        val error = Throwable(\"Fail!\")\n         val repo = mockk<AuthRepository> {\n             every { captchaTokenResultFlow } returns flowOf()\n             coEvery {\n@@ -197,7 +198,7 @@ class StartRegistrationViewModelTest : BaseViewModelTest() {\n                     name = NAME,\n                     receiveMarketingEmails = true,\n                 )\n-            } returns SendVerificationEmailResult.Error(errorMessage = \"mock_error\")\n+            } returns SendVerificationEmailResult.Error(errorMessage = \"mock_error\", error = error)\n         }\n         val viewModel = StartRegistrationViewModel(\n             savedStateHandle = validInputHandle,\n@@ -217,6 +218,7 @@ class StartRegistrationViewModelTest : BaseViewModelTest() {\n                     dialog = StartRegistrationDialog.Error(\n                         title = R.string.an_error_has_occurred.asText(),\n                         message = \"mock_error\".asText(),\n+                        error = error,\n                     ),\n                 ),\n                 awaitItem(),\ndiff --git a/app/src/test/java/com/x8bit/bitwarden/ui/auth/feature/twofactorlogin/TwoFactorLoginViewModelTest.kt b/app/src/test/java/com/x8bit/bitwarden/ui/auth/feature/twofactorlogin/TwoFactorLoginViewModelTest.kt\nindex a646c5d0ec4..ffd3df6567b 100644\n--- a/app/src/test/java/com/x8bit/bitwarden/ui/auth/feature/twofactorlogin/TwoFactorLoginViewModelTest.kt\n+++ b/app/src/test/java/com/x8bit/bitwarden/ui/auth/feature/twofactorlogin/TwoFactorLoginViewModelTest.kt\n@@ -926,9 +926,10 @@ class TwoFactorLoginViewModelTest : BaseViewModelTest() {\n \n     @Test\n     fun `ResendEmailClick returns error should update dialogState`() = runTest {\n+        val error = Throwable(\"Fail!\")\n         coEvery {\n             authRepository.resendVerificationCodeEmail()\n-        } returns ResendEmailResult.Error(message = null)\n+        } returns ResendEmailResult.Error(message = null, error = error)\n \n         val viewModel = createViewModel()\n         viewModel.stateFlow.test {\n@@ -951,6 +952,7 @@ class TwoFactorLoginViewModelTest : BaseViewModelTest() {\n                     dialogState = TwoFactorLoginState.DialogState.Error(\n                         title = R.string.an_error_has_occurred.asText(),\n                         message = R.string.verification_email_not_sent.asText(),\n+                        error = error,\n                     ),\n                 ),\n                 awaitItem(),\n@@ -973,6 +975,7 @@ class TwoFactorLoginViewModelTest : BaseViewModelTest() {\n                     dialogState = TwoFactorLoginState.DialogState.Error(\n                         title = R.string.an_error_has_occurred.asText(),\n                         message = R.string.verification_email_not_sent.asText(),\n+                        error = error,\n                     ),\n                 ),\n                 awaitItem(),\n@@ -1079,12 +1082,13 @@ class TwoFactorLoginViewModelTest : BaseViewModelTest() {\n     @Test\n     fun `ReceiveResendEmailResult with ResendEmailResult Error should not emit any events`() =\n         runTest {\n+            val error = Throwable(\"Fail!\")\n             val viewModel = createViewModel()\n             viewModel.stateFlow.test {\n                 assertEquals(DEFAULT_STATE, awaitItem())\n                 viewModel.trySendAction(\n                     TwoFactorLoginAction.Internal.ReceiveResendEmailResult(\n-                        resendEmailResult = ResendEmailResult.Error(message = null),\n+                        resendEmailResult = ResendEmailResult.Error(message = null, error = error),\n                         isUserInitiated = true,\n                     ),\n                 )\n@@ -1093,6 +1097,7 @@ class TwoFactorLoginViewModelTest : BaseViewModelTest() {\n                         dialogState = TwoFactorLoginState.DialogState.Error(\n                             title = R.string.an_error_has_occurred.asText(),\n                             message = R.string.verification_email_not_sent.asText(),\n+                            error = error,\n                         ),\n                     ),\n                     awaitItem(),\ndiff --git a/app/src/test/java/com/x8bit/bitwarden/ui/platform/feature/settings/accountsecurity/AccountSecurityViewModelTest.kt b/app/src/test/java/com/x8bit/bitwarden/ui/platform/feature/settings/accountsecurity/AccountSecurityViewModelTest.kt\nindex a9c963c4dbe..340d1b4a534 100644\n--- a/app/src/test/java/com/x8bit/bitwarden/ui/platform/feature/settings/accountsecurity/AccountSecurityViewModelTest.kt\n+++ b/app/src/test/java/com/x8bit/bitwarden/ui/platform/feature/settings/accountsecurity/AccountSecurityViewModelTest.kt\n@@ -10,6 +10,7 @@ import com.x8bit.bitwarden.data.auth.repository.model.Organization\n import com.x8bit.bitwarden.data.auth.repository.model.PolicyInformation\n import com.x8bit.bitwarden.data.auth.repository.model.UserFingerprintResult\n import com.x8bit.bitwarden.data.auth.repository.model.UserState\n+import com.x8bit.bitwarden.data.platform.error.NoActiveUserException\n import com.x8bit.bitwarden.data.platform.manager.BiometricsEncryptionManager\n import com.x8bit.bitwarden.data.platform.manager.FeatureFlagManager\n import com.x8bit.bitwarden.data.platform.manager.FirstTimeActionManager\n@@ -180,7 +181,7 @@ class AccountSecurityViewModelTest : BaseViewModelTest() {\n                     isEnabled = true,\n                     type = PolicyTypeJson.REMOVE_UNLOCK_WITH_PIN,\n                     organizationId = \"organizationUser\",\n-                    ),\n+                ),\n             ),\n         )\n \n@@ -297,7 +298,7 @@ class AccountSecurityViewModelTest : BaseViewModelTest() {\n         // Clear fingerprint phrase\n         viewModel.trySendAction(\n             AccountSecurityAction.Internal.FingerprintResultReceive(\n-                UserFingerprintResult.Error,\n+                fingerprintResult = UserFingerprintResult.Error(error = NoActiveUserException()),\n             ),\n         )\n         assertEquals(\ndiff --git a/app/src/test/java/com/x8bit/bitwarden/ui/platform/feature/settings/accountsecurity/deleteaccountconfirmation/DeleteAccountConfirmationViewModelTest.kt b/app/src/test/java/com/x8bit/bitwarden/ui/platform/feature/settings/accountsecurity/deleteaccountconfirmation/DeleteAccountConfirmationViewModelTest.kt\nindex 7c86b89b975..f8d797dfe86 100644\n--- a/app/src/test/java/com/x8bit/bitwarden/ui/platform/feature/settings/accountsecurity/deleteaccountconfirmation/DeleteAccountConfirmationViewModelTest.kt\n+++ b/app/src/test/java/com/x8bit/bitwarden/ui/platform/feature/settings/accountsecurity/deleteaccountconfirmation/DeleteAccountConfirmationViewModelTest.kt\n@@ -183,9 +183,10 @@ class DeleteAccountConfirmationViewModelTest : BaseViewModelTest() {\n     @Suppress(\"MaxLineLength\")\n     fun `on ResendCodeClick with requestOneTimePasscode Success should set dialog to Error`() =\n         runTest {\n+            val error = Throwable(\"Fail!\")\n             coEvery {\n                 authRepo.requestOneTimePasscode()\n-            } returns RequestOtpResult.Error(message = \"Error\")\n+            } returns RequestOtpResult.Error(message = \"error\", error = error)\n             val viewModel = createViewModel(state = DEFAULT_STATE)\n             viewModel.stateFlow.test {\n                 assertEquals(DEFAULT_STATE, awaitItem())\n@@ -202,6 +203,7 @@ class DeleteAccountConfirmationViewModelTest : BaseViewModelTest() {\n                     DEFAULT_STATE.copy(\n                         dialog = DeleteAccountConfirmationState.DeleteAccountConfirmationDialog.Error(\n                             message = R.string.generic_error_message.asText(),\n+                            error = error,\n                         ),\n                     ),\n                     awaitItem(),\ndiff --git a/app/src/test/java/com/x8bit/bitwarden/ui/platform/feature/settings/exportvault/ExportVaultViewModelTest.kt b/app/src/test/java/com/x8bit/bitwarden/ui/platform/feature/settings/exportvault/ExportVaultViewModelTest.kt\nindex 501bbac7636..98259200321 100644\n--- a/app/src/test/java/com/x8bit/bitwarden/ui/platform/feature/settings/exportvault/ExportVaultViewModelTest.kt\n+++ b/app/src/test/java/com/x8bit/bitwarden/ui/platform/feature/settings/exportvault/ExportVaultViewModelTest.kt\n@@ -146,11 +146,12 @@ class ExportVaultViewModelTest : BaseViewModelTest() {\n             passwordInput = passcode,\n             showSendCodeButton = true,\n         )\n+        val error = Throwable(\"Fail!\")\n         coEvery {\n             authRepository.verifyOneTimePasscode(\n                 oneTimePasscode = passcode,\n             )\n-        } returns VerifyOtpResult.NotVerified(\"Wrong\")\n+        } returns VerifyOtpResult.NotVerified(errorMessage = \"Wrong\", error = error)\n \n         val viewModel = createViewModel(initialState)\n \n@@ -161,6 +162,7 @@ class ExportVaultViewModelTest : BaseViewModelTest() {\n                 dialogState = ExportVaultState.DialogState.Error(\n                     title = R.string.an_error_has_occurred.asText(),\n                     message = R.string.generic_error_message.asText(),\n+                    error = error,\n                 ),\n             ),\n             viewModel.stateFlow.value,\n@@ -509,10 +511,11 @@ class ExportVaultViewModelTest : BaseViewModelTest() {\n     @Test\n     fun `SendCodeClick should call requestOneTimePasscode and update dialog state to sending then back to null when request completes and send correct event on error`() =\n         runTest {\n+            val error = Throwable(\"Fail!\")\n             val viewModel = createViewModel()\n             coEvery {\n                 authRepository.requestOneTimePasscode()\n-            } returns RequestOtpResult.Error(message = null)\n+            } returns RequestOtpResult.Error(message = null, error = error)\n             viewModel.stateEventFlow(backgroundScope) { stateTurbine, eventTurbine ->\n                 assertEquals(DEFAULT_STATE, stateTurbine.awaitItem())\n                 viewModel.trySendAction(ExportVaultAction.SendCodeClick)\ndiff --git a/app/src/test/java/com/x8bit/bitwarden/ui/vault/feature/addedit/VaultAddEditViewModelTest.kt b/app/src/test/java/com/x8bit/bitwarden/ui/vault/feature/addedit/VaultAddEditViewModelTest.kt\nindex 63fb11e8d31..b3f171db03f 100644\n--- a/app/src/test/java/com/x8bit/bitwarden/ui/vault/feature/addedit/VaultAddEditViewModelTest.kt\n+++ b/app/src/test/java/com/x8bit/bitwarden/ui/vault/feature/addedit/VaultAddEditViewModelTest.kt\n@@ -4078,7 +4078,7 @@ class VaultAddEditViewModelTest : BaseViewModelTest() {\n             val pin = \"PIN\"\n             coEvery {\n                 authRepository.validatePin(pin = pin)\n-            } returns ValidatePinResult.Error\n+            } returns ValidatePinResult.Error(error = Throwable(\"Fail!\"))\n \n             viewModel.trySendAction(\n                 VaultAddEditAction.Common.PinFido2VerificationSubmit(\ndiff --git a/app/src/test/java/com/x8bit/bitwarden/ui/vault/feature/itemlisting/VaultItemListingViewModelTest.kt b/app/src/test/java/com/x8bit/bitwarden/ui/vault/feature/itemlisting/VaultItemListingViewModelTest.kt\nindex 9526147208f..c83c6640f55 100644\n--- a/app/src/test/java/com/x8bit/bitwarden/ui/vault/feature/itemlisting/VaultItemListingViewModelTest.kt\n+++ b/app/src/test/java/com/x8bit/bitwarden/ui/vault/feature/itemlisting/VaultItemListingViewModelTest.kt\n@@ -4216,7 +4216,7 @@ class VaultItemListingViewModelTest : BaseViewModelTest() {\n         val pin = \"PIN\"\n         coEvery {\n             authRepository.validatePin(pin = pin)\n-        } returns ValidatePinResult.Error\n+        } returns ValidatePinResult.Error(error = Throwable(\"Fail!\"))\n \n         viewModel.trySendAction(\n             VaultItemListingsAction.PinFido2VerificationSubmit(\n", "problem_statement": "PM-19314: Propagate remaining auth errors to the UI\n## Objective\nThis PR propagates the errors from the remaining auth flows to the UI.", "hints_text": "", "created_at": "2025-03-17T22:48:51Z"}
{"repo": "bitwarden/android", "pull_number": 4884, "instance_id": "bitwarden__android-4884", "issue_numbers": [], "base_commit": "ad8d8d271a2df6c4714cc9cf4293c0dafa8eceb2", "patch": "diff --git a/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/AuthRepositoryImpl.kt b/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/AuthRepositoryImpl.kt\nindex 16de6cefe06..f8794958eab 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/AuthRepositoryImpl.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/AuthRepositoryImpl.kt\n@@ -924,11 +924,15 @@ class AuthRepositoryImpl(\n         return accountsService.requestPasswordHint(email).fold(\n             onSuccess = {\n                 when (it) {\n-                    is PasswordHintResponseJson.Error -> PasswordHintResult.Error(it.errorMessage)\n+                    is PasswordHintResponseJson.Error -> PasswordHintResult.Error(\n+                        message = it.errorMessage,\n+                        error = null,\n+                    )\n+\n                     PasswordHintResponseJson.Success -> PasswordHintResult.Success\n                 }\n             },\n-            onFailure = { PasswordHintResult.Error(null) },\n+            onFailure = { PasswordHintResult.Error(message = null, error = it) },\n         )\n     }\n \n@@ -936,12 +940,12 @@ class AuthRepositoryImpl(\n         val activeAccount = authDiskSource\n             .userState\n             ?.activeAccount\n-            ?: return RemovePasswordResult.Error\n+            ?: return RemovePasswordResult.Error(error = NoActiveUserException())\n         val profile = activeAccount.profile\n         val userId = profile.userId\n         val userKey = authDiskSource\n             .getUserKey(userId = userId)\n-            ?: return RemovePasswordResult.Error\n+            ?: return RemovePasswordResult.Error(error = MissingPropertyException(\"User Key\"))\n         val keyConnectorUrl = organizations\n             .find {\n                 it.shouldUseKeyConnector &&\n@@ -949,7 +953,9 @@ class AuthRepositoryImpl(\n                     it.type != OrganizationType.ADMIN\n             }\n             ?.keyConnectorUrl\n-            ?: return RemovePasswordResult.Error\n+            ?: return RemovePasswordResult.Error(\n+                error = MissingPropertyException(\"Key Connector URL\"),\n+            )\n         return keyConnectorManager\n             .migrateExistingUserToKeyConnector(\n                 userId = userId,\n@@ -967,7 +973,7 @@ class AuthRepositoryImpl(\n                 settingsRepository.setDefaultsIfNecessary(userId = userId)\n             }\n             .fold(\n-                onFailure = { RemovePasswordResult.Error },\n+                onFailure = { RemovePasswordResult.Error(error = it) },\n                 onSuccess = { RemovePasswordResult.Success },\n             )\n     }\n@@ -980,7 +986,7 @@ class AuthRepositoryImpl(\n         val activeAccount = authDiskSource\n             .userState\n             ?.activeAccount\n-            ?: return ResetPasswordResult.Error\n+            ?: return ResetPasswordResult.Error(error = NoActiveUserException())\n         val currentPasswordHash = currentPassword?.let { password ->\n             authSdkSource\n                 .hashPassword(\n@@ -990,7 +996,7 @@ class AuthRepositoryImpl(\n                     purpose = HashPurpose.SERVER_AUTHORIZATION,\n                 )\n                 .fold(\n-                    onFailure = { return ResetPasswordResult.Error },\n+                    onFailure = { return ResetPasswordResult.Error(error = it) },\n                     onSuccess = { it },\n                 )\n         }\n@@ -1036,7 +1042,7 @@ class AuthRepositoryImpl(\n                     // Return the success.\n                     ResetPasswordResult.Success\n                 },\n-                onFailure = { ResetPasswordResult.Error },\n+                onFailure = { ResetPasswordResult.Error(error = it) },\n             )\n     }\n \n@@ -1049,7 +1055,7 @@ class AuthRepositoryImpl(\n         val activeAccount = authDiskSource\n             .userState\n             ?.activeAccount\n-            ?: return SetPasswordResult.Error\n+            ?: return SetPasswordResult.Error(error = NoActiveUserException())\n         val userId = activeAccount.profile.userId\n \n         // Update the saved master password hash.\n@@ -1060,7 +1066,7 @@ class AuthRepositoryImpl(\n                 kdf = activeAccount.profile.toSdkParams(),\n                 purpose = HashPurpose.SERVER_AUTHORIZATION,\n             )\n-            .getOrElse { return@setPassword SetPasswordResult.Error }\n+            .getOrElse { return@setPassword SetPasswordResult.Error(error = it) }\n \n         return when (activeAccount.profile.forcePasswordResetReason) {\n             ForcePasswordResetReason.TDE_USER_WITHOUT_PASSWORD_HAS_PASSWORD_RESET_PERMISSION -> {\n@@ -1110,7 +1116,7 @@ class AuthRepositoryImpl(\n                     }\n             }\n             .flatMap {\n-                when (vaultRepository.unlockVaultWithMasterPassword(password)) {\n+                when (val result = vaultRepository.unlockVaultWithMasterPassword(password)) {\n                     is VaultUnlockResult.Success -> {\n                         enrollUserInPasswordReset(\n                             userId = userId,\n@@ -1119,12 +1125,9 @@ class AuthRepositoryImpl(\n                         )\n                     }\n \n-                    is VaultUnlockResult.AuthenticationError,\n-                    is VaultUnlockResult.BiometricDecodingError,\n-                    is VaultUnlockResult.InvalidStateError,\n-                    is VaultUnlockResult.GenericError,\n-                        -> {\n-                        IllegalStateException(\"Failed to unlock vault\").asFailure()\n+                    is VaultUnlockError -> {\n+                        (result.error ?: IllegalStateException(\"Failed to unlock vault\"))\n+                            .asFailure()\n                     }\n                 }\n             }\n@@ -1134,7 +1137,7 @@ class AuthRepositoryImpl(\n                 this.organizationIdentifier = null\n             }\n             .fold(\n-                onFailure = { SetPasswordResult.Error },\n+                onFailure = { SetPasswordResult.Error(error = it) },\n                 onSuccess = { SetPasswordResult.Success },\n             )\n     }\n@@ -1251,7 +1254,7 @@ class AuthRepositoryImpl(\n             )\n             .fold(\n                 onSuccess = { PasswordStrengthResult.Success(passwordStrength = it) },\n-                onFailure = { PasswordStrengthResult.Error },\n+                onFailure = { PasswordStrengthResult.Error(error = it) },\n             )\n \n     override suspend fun validatePassword(password: String): ValidatePasswordResult {\ndiff --git a/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/PasswordHintResult.kt b/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/PasswordHintResult.kt\nindex 6f7aca6dcf5..254550d6052 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/PasswordHintResult.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/PasswordHintResult.kt\n@@ -13,5 +13,8 @@ sealed class PasswordHintResult {\n     /**\n      * There was an error.\n      */\n-    data class Error(val message: String?) : PasswordHintResult()\n+    data class Error(\n+        val message: String?,\n+        val error: Throwable?,\n+    ) : PasswordHintResult()\n }\ndiff --git a/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/PasswordStrengthResult.kt b/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/PasswordStrengthResult.kt\nindex 2144242dc34..60f14a31e98 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/PasswordStrengthResult.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/PasswordStrengthResult.kt\n@@ -16,5 +16,7 @@ sealed class PasswordStrengthResult {\n     /**\n      * There was an error determining the password strength.\n      */\n-    data object Error : PasswordStrengthResult()\n+    data class Error(\n+        val error: Throwable,\n+    ) : PasswordStrengthResult()\n }\ndiff --git a/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/RemovePasswordResult.kt b/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/RemovePasswordResult.kt\nindex 5e59945a6a3..4beaed90515 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/RemovePasswordResult.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/RemovePasswordResult.kt\n@@ -12,5 +12,7 @@ sealed class RemovePasswordResult {\n     /**\n      * There was an error removing the password.\n      */\n-    data object Error : RemovePasswordResult()\n+    data class Error(\n+        val error: Throwable,\n+    ) : RemovePasswordResult()\n }\ndiff --git a/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/ResetPasswordResult.kt b/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/ResetPasswordResult.kt\nindex 376929d4d71..eb7c8335fd8 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/ResetPasswordResult.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/ResetPasswordResult.kt\n@@ -12,5 +12,7 @@ sealed class ResetPasswordResult {\n     /**\n      * There was an error resetting the password.\n      */\n-    data object Error : ResetPasswordResult()\n+    data class Error(\n+        val error: Throwable,\n+    ) : ResetPasswordResult()\n }\ndiff --git a/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/SetPasswordResult.kt b/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/SetPasswordResult.kt\nindex b7c2e88c953..d17bc15b49d 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/SetPasswordResult.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/data/auth/repository/model/SetPasswordResult.kt\n@@ -12,5 +12,7 @@ sealed class SetPasswordResult {\n     /**\n      * There was an error setting the password.\n      */\n-    data object Error : SetPasswordResult()\n+    data class Error(\n+        val error: Throwable,\n+    ) : SetPasswordResult()\n }\ndiff --git a/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/completeregistration/CompleteRegistrationViewModel.kt b/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/completeregistration/CompleteRegistrationViewModel.kt\nindex 1e2721128bd..ad0b27b05eb 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/completeregistration/CompleteRegistrationViewModel.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/completeregistration/CompleteRegistrationViewModel.kt\n@@ -187,7 +187,7 @@ class CompleteRegistrationViewModel @Inject constructor(\n                 }\n             }\n \n-            PasswordStrengthResult.Error -> Unit\n+            is PasswordStrengthResult.Error -> Unit\n         }\n     }\n \ndiff --git a/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/createaccount/CreateAccountViewModel.kt b/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/createaccount/CreateAccountViewModel.kt\nindex a2ce58891c5..4c2bb1e5fe1 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/createaccount/CreateAccountViewModel.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/createaccount/CreateAccountViewModel.kt\n@@ -128,7 +128,7 @@ class CreateAccountViewModel @Inject constructor(\n                 }\n             }\n \n-            PasswordStrengthResult.Error -> {\n+            is PasswordStrengthResult.Error -> {\n                 // Leave UI the same\n             }\n         }\ndiff --git a/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/masterpasswordhint/MasterPasswordHintScreen.kt b/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/masterpasswordhint/MasterPasswordHintScreen.kt\nindex 2a1912b1867..86022e351f3 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/masterpasswordhint/MasterPasswordHintScreen.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/masterpasswordhint/MasterPasswordHintScreen.kt\n@@ -71,6 +71,7 @@ fun MasterPasswordHintScreen(\n                     ?.invoke()\n                     ?: stringResource(id = R.string.an_error_has_occurred),\n                 message = dialogState.message(),\n+                throwable = dialogState.error,\n                 onDismissRequest = remember(viewModel) {\n                     { viewModel.trySendAction(MasterPasswordHintAction.DismissDialog) }\n                 },\ndiff --git a/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/masterpasswordhint/MasterPasswordHintViewModel.kt b/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/masterpasswordhint/MasterPasswordHintViewModel.kt\nindex 7bc332ff445..aa7970df25c 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/masterpasswordhint/MasterPasswordHintViewModel.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/masterpasswordhint/MasterPasswordHintViewModel.kt\n@@ -77,14 +77,12 @@ class MasterPasswordHintViewModel @Inject constructor(\n         }\n \n         if (email.isBlank()) {\n-            val errorMessage =\n-                R.string.validation_field_required.asText(R.string.email_address.asText())\n-\n             mutableStateFlow.update {\n                 it.copy(\n                     dialog = MasterPasswordHintState.DialogState.Error(\n                         title = R.string.an_error_has_occurred.asText(),\n-                        message = errorMessage,\n+                        message = R.string.validation_field_required\n+                            .asText(R.string.email_address.asText()),\n                     ),\n                 )\n             }\n@@ -121,7 +119,7 @@ class MasterPasswordHintViewModel @Inject constructor(\n     private fun handlePasswordHintResult(\n         action: MasterPasswordHintAction.Internal.PasswordHintResultReceive,\n     ) {\n-        when (action.result) {\n+        when (val result = action.result) {\n             is PasswordHintResult.Success -> {\n                 mutableStateFlow.update {\n                     it.copy(dialog = MasterPasswordHintState.DialogState.PasswordHintSent)\n@@ -129,13 +127,13 @@ class MasterPasswordHintViewModel @Inject constructor(\n             }\n \n             is PasswordHintResult.Error -> {\n-                val errorMessage = action.result.message?.asText()\n-                    ?: R.string.generic_error_message.asText()\n                 mutableStateFlow.update {\n                     it.copy(\n                         dialog = MasterPasswordHintState.DialogState.Error(\n                             title = R.string.an_error_has_occurred.asText(),\n-                            message = errorMessage,\n+                            message = result.message?.asText()\n+                                ?: R.string.generic_error_message.asText(),\n+                            error = result.error,\n                         ),\n                     )\n                 }\n@@ -192,6 +190,7 @@ data class MasterPasswordHintState(\n         data class Error(\n             val title: Text? = null,\n             val message: Text,\n+            val error: Throwable? = null,\n         ) : DialogState()\n     }\n }\ndiff --git a/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/removepassword/RemovePasswordViewModel.kt b/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/removepassword/RemovePasswordViewModel.kt\nindex ca5791f555a..93b1d6cbc1d 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/removepassword/RemovePasswordViewModel.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/removepassword/RemovePasswordViewModel.kt\n@@ -89,13 +89,14 @@ class RemovePasswordViewModel @Inject constructor(\n     private fun handleReceiveRemovePasswordResult(\n         action: RemovePasswordAction.Internal.ReceiveRemovePasswordResult,\n     ) {\n-        when (action.result) {\n-            RemovePasswordResult.Error -> {\n+        when (val result = action.result) {\n+            is RemovePasswordResult.Error -> {\n                 mutableStateFlow.update {\n                     it.copy(\n                         dialogState = RemovePasswordState.DialogState.Error(\n                             title = R.string.an_error_has_occurred.asText(),\n                             message = R.string.generic_error_message.asText(),\n+                            error = result.error,\n                         ),\n                     )\n                 }\n@@ -130,6 +131,7 @@ data class RemovePasswordState(\n         data class Error(\n             val title: Text? = null,\n             val message: Text,\n+            val error: Throwable? = null,\n         ) : DialogState()\n \n         /**\ndiff --git a/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/resetpassword/ResetPasswordViewModel.kt b/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/resetpassword/ResetPasswordViewModel.kt\nindex 39849333423..41fddfd1a4d 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/resetpassword/ResetPasswordViewModel.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/resetpassword/ResetPasswordViewModel.kt\n@@ -152,7 +152,7 @@ class ResetPasswordViewModel @Inject constructor(\n                 }\n             }\n \n-            PasswordStrengthResult.Error -> Unit\n+            is PasswordStrengthResult.Error -> Unit\n         }\n     }\n \n@@ -284,14 +284,15 @@ class ResetPasswordViewModel @Inject constructor(\n         // End the loading state.\n         mutableStateFlow.update { it.copy(dialogState = null) }\n \n-        when (action.result) {\n+        when (val result = action.result) {\n             // Display an alert if there was an error.\n-            ResetPasswordResult.Error -> {\n+            is ResetPasswordResult.Error -> {\n                 mutableStateFlow.update {\n                     it.copy(\n                         dialogState = ResetPasswordState.DialogState.Error(\n                             title = R.string.an_error_has_occurred.asText(),\n                             message = R.string.generic_error_message.asText(),\n+                            error = result.error,\n                         ),\n                     )\n                 }\ndiff --git a/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/setpassword/SetPasswordScreen.kt b/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/setpassword/SetPasswordScreen.kt\nindex e6880c1498e..da51323354e 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/setpassword/SetPasswordScreen.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/setpassword/SetPasswordScreen.kt\n@@ -193,6 +193,7 @@ private fun SetPasswordDialogs(\n             BitwardenBasicDialog(\n                 title = dialogState.title?.invoke(),\n                 message = dialogState.message(),\n+                throwable = dialogState.error,\n                 onDismissRequest = onDismissRequest,\n             )\n         }\ndiff --git a/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/setpassword/SetPasswordViewModel.kt b/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/setpassword/SetPasswordViewModel.kt\nindex 5c58cd3347e..52a777f233c 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/setpassword/SetPasswordViewModel.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/ui/auth/feature/setpassword/SetPasswordViewModel.kt\n@@ -179,13 +179,14 @@ class SetPasswordViewModel @Inject constructor(\n     private fun handleReceiveSetPasswordResult(\n         action: SetPasswordAction.Internal.ReceiveSetPasswordResult,\n     ) {\n-        when (action.result) {\n-            SetPasswordResult.Error -> {\n+        when (val result = action.result) {\n+            is SetPasswordResult.Error -> {\n                 mutableStateFlow.update {\n                     it.copy(\n                         dialogState = SetPasswordState.DialogState.Error(\n                             title = R.string.an_error_has_occurred.asText(),\n                             message = R.string.generic_error_message.asText(),\n+                            error = result.error,\n                         ),\n                     )\n                 }\n@@ -267,6 +268,7 @@ data class SetPasswordState(\n         data class Error(\n             val title: Text? = null,\n             val message: Text,\n+            val error: Throwable? = null,\n         ) : DialogState()\n \n         /**\ndiff --git a/app/src/main/java/com/x8bit/bitwarden/ui/platform/feature/settings/exportvault/ExportVaultViewModel.kt b/app/src/main/java/com/x8bit/bitwarden/ui/platform/feature/settings/exportvault/ExportVaultViewModel.kt\nindex 77ebcfbdbb0..2dc3d6e1dea 100644\n--- a/app/src/main/java/com/x8bit/bitwarden/ui/platform/feature/settings/exportvault/ExportVaultViewModel.kt\n+++ b/app/src/main/java/com/x8bit/bitwarden/ui/platform/feature/settings/exportvault/ExportVaultViewModel.kt\n@@ -382,7 +382,7 @@ class ExportVaultViewModel @Inject constructor(\n                 }\n             }\n \n-            PasswordStrengthResult.Error -> {\n+            is PasswordStrengthResult.Error -> {\n                 // Leave UI the same\n             }\n         }\n", "test_patch": "diff --git a/app/src/test/java/com/x8bit/bitwarden/data/auth/repository/AuthRepositoryTest.kt b/app/src/test/java/com/x8bit/bitwarden/data/auth/repository/AuthRepositoryTest.kt\nindex d6f4462bd6e..b9e495b1996 100644\n--- a/app/src/test/java/com/x8bit/bitwarden/data/auth/repository/AuthRepositoryTest.kt\n+++ b/app/src/test/java/com/x8bit/bitwarden/data/auth/repository/AuthRepositoryTest.kt\n@@ -4470,7 +4470,7 @@ class AuthRepositoryTest {\n \n         val result = repository.removePassword(masterPassword = PASSWORD)\n \n-        assertEquals(RemovePasswordResult.Error, result)\n+        assertEquals(RemovePasswordResult.Error(error = NoActiveUserException()), result)\n     }\n \n     @Test\n@@ -4480,7 +4480,10 @@ class AuthRepositoryTest {\n \n         val result = repository.removePassword(masterPassword = PASSWORD)\n \n-        assertEquals(RemovePasswordResult.Error, result)\n+        assertEquals(\n+            RemovePasswordResult.Error(error = MissingPropertyException(\"User Key\")),\n+            result,\n+        )\n     }\n \n     @Test\n@@ -4503,7 +4506,10 @@ class AuthRepositoryTest {\n \n         val result = repository.removePassword(masterPassword = PASSWORD)\n \n-        assertEquals(RemovePasswordResult.Error, result)\n+        assertEquals(\n+            RemovePasswordResult.Error(error = MissingPropertyException(\"Key Connector URL\")),\n+            result,\n+        )\n     }\n \n     @Test\n@@ -4512,6 +4518,7 @@ class AuthRepositoryTest {\n             fakeAuthDiskSource.userState = SINGLE_USER_STATE_1\n             fakeAuthDiskSource.storeUserKey(userId = USER_ID_1, userKey = ENCRYPTED_USER_KEY)\n             val url = \"www.example.com\"\n+            val error = Throwable(\"Fail!\")\n             val organizations = listOf(\n                 mockk<SyncResponseJson.Profile.Organization> {\n                     every { id } returns \"orgId\"\n@@ -4534,11 +4541,11 @@ class AuthRepositoryTest {\n                     masterPassword = PASSWORD,\n                     kdf = PROFILE_1.toSdkParams(),\n                 )\n-            } returns Throwable(\"Fail\").asFailure()\n+            } returns error.asFailure()\n \n             val result = repository.removePassword(masterPassword = PASSWORD)\n \n-            assertEquals(RemovePasswordResult.Error, result)\n+            assertEquals(RemovePasswordResult.Error(error = error), result)\n         }\n \n     @Suppress(\"MaxLineLength\")\n@@ -4673,6 +4680,7 @@ class AuthRepositoryTest {\n         val currentPassword = \"currentPassword\"\n         val currentPasswordHash = \"hashedCurrentPassword\"\n         val newPassword = \"newPassword\"\n+        val error = Throwable(\"Fail\")\n         fakeAuthDiskSource.userState = SINGLE_USER_STATE_1\n         coEvery {\n             authSdkSource.hashPassword(\n@@ -4687,7 +4695,7 @@ class AuthRepositoryTest {\n                 userId = ACCOUNT_1.profile.userId,\n                 newPassword = newPassword,\n             )\n-        } returns Throwable(\"Fail\").asFailure()\n+        } returns error.asFailure()\n \n         val result = repository.resetPassword(\n             currentPassword = currentPassword,\n@@ -4696,7 +4704,7 @@ class AuthRepositoryTest {\n         )\n \n         assertEquals(\n-            ResetPasswordResult.Error,\n+            ResetPasswordResult.Error(error = error),\n             result,\n         )\n         coVerify {\n@@ -4723,7 +4731,7 @@ class AuthRepositoryTest {\n             passwordHint = \"passwordHint\",\n         )\n \n-        assertEquals(SetPasswordResult.Error, result)\n+        assertEquals(SetPasswordResult.Error(error = NoActiveUserException()), result)\n         fakeAuthDiskSource.assertMasterPasswordHash(userId = USER_ID_1, passwordHash = null)\n         fakeAuthDiskSource.assertPrivateKey(userId = USER_ID_1, privateKey = null)\n         fakeAuthDiskSource.assertUserKey(userId = USER_ID_1, userKey = null)\n@@ -4732,6 +4740,7 @@ class AuthRepositoryTest {\n     @Test\n     fun `setPassword with authSdkSource hashPassword failure should return Error`() = runTest {\n         val password = \"password\"\n+        val error = Throwable(\"Fail\")\n         fakeAuthDiskSource.userState = SINGLE_USER_STATE_1\n         coEvery {\n             authSdkSource.hashPassword(\n@@ -4740,7 +4749,7 @@ class AuthRepositoryTest {\n                 kdf = SINGLE_USER_STATE_1.activeAccount.profile.toSdkParams(),\n                 purpose = HashPurpose.SERVER_AUTHORIZATION,\n             )\n-        } returns Throwable(\"Fail\").asFailure()\n+        } returns error.asFailure()\n \n         val result = repository.setPassword(\n             organizationIdentifier = \"organizationId\",\n@@ -4748,7 +4757,7 @@ class AuthRepositoryTest {\n             passwordHint = \"passwordHint\",\n         )\n \n-        assertEquals(SetPasswordResult.Error, result)\n+        assertEquals(SetPasswordResult.Error(error = error), result)\n         fakeAuthDiskSource.assertMasterPasswordHash(userId = USER_ID_1, passwordHash = null)\n         fakeAuthDiskSource.assertPrivateKey(userId = USER_ID_1, privateKey = null)\n         fakeAuthDiskSource.assertUserKey(userId = USER_ID_1, userKey = null)\n@@ -4758,6 +4767,7 @@ class AuthRepositoryTest {\n     fun `setPassword with authSdkSource makeRegisterKeys failure should return Error`() = runTest {\n         val password = \"password\"\n         val passwordHash = \"passwordHash\"\n+        val error = Throwable(\"Fail\")\n         val kdf = SINGLE_USER_STATE_1.activeAccount.profile.toSdkParams()\n         fakeAuthDiskSource.userState = SINGLE_USER_STATE_1\n         coEvery {\n@@ -4774,7 +4784,7 @@ class AuthRepositoryTest {\n                 password = password,\n                 kdf = kdf,\n             )\n-        } returns Throwable(\"Fail\").asFailure()\n+        } returns error.asFailure()\n \n         val result = repository.setPassword(\n             organizationIdentifier = \"organizationId\",\n@@ -4782,7 +4792,7 @@ class AuthRepositoryTest {\n             passwordHint = \"passwordHint\",\n         )\n \n-        assertEquals(SetPasswordResult.Error, result)\n+        assertEquals(SetPasswordResult.Error(error = error), result)\n         fakeAuthDiskSource.assertMasterPasswordHash(userId = USER_ID_1, passwordHash = null)\n         fakeAuthDiskSource.assertPrivateKey(userId = USER_ID_1, privateKey = null)\n         fakeAuthDiskSource.assertUserKey(userId = USER_ID_1, userKey = null)\n@@ -4792,6 +4802,7 @@ class AuthRepositoryTest {\n     fun `setPassword with vaultSdkSource updatePassword failure should return Error`() = runTest {\n         val password = \"password\"\n         val passwordHash = \"passwordHash\"\n+        val error = Throwable(\"Fail\")\n         val kdf = SINGLE_USER_STATE_1.activeAccount.profile.toSdkParams()\n         fakeAuthDiskSource.userState = SINGLE_USER_STATE_1.copy(\n             accounts = mapOf(\n@@ -4813,7 +4824,7 @@ class AuthRepositoryTest {\n         } returns passwordHash.asSuccess()\n         coEvery {\n             vaultSdkSource.updatePassword(userId = USER_ID_1, newPassword = password)\n-        } returns Throwable(\"Fail\").asFailure()\n+        } returns error.asFailure()\n \n         val result = repository.setPassword(\n             organizationIdentifier = \"organizationId\",\n@@ -4821,7 +4832,7 @@ class AuthRepositoryTest {\n             passwordHint = \"passwordHint\",\n         )\n \n-        assertEquals(SetPasswordResult.Error, result)\n+        assertEquals(SetPasswordResult.Error(error = error), result)\n         fakeAuthDiskSource.assertMasterPasswordHash(userId = USER_ID_1, passwordHash = null)\n         fakeAuthDiskSource.assertPrivateKey(userId = USER_ID_1, privateKey = null)\n         fakeAuthDiskSource.assertUserKey(userId = USER_ID_1, userKey = null)\n@@ -4838,6 +4849,7 @@ class AuthRepositoryTest {\n         val publicRsaKey = \"publicRsaKey\"\n         val profile = SINGLE_USER_STATE_1.activeAccount.profile\n         val kdf = profile.toSdkParams()\n+        val error = Throwable(\"Fail\")\n         val registerKeyResponse = RegisterKeyResponse(\n             masterPasswordHash = passwordHash,\n             encryptedUserKey = encryptedUserKey,\n@@ -4871,7 +4883,7 @@ class AuthRepositoryTest {\n         } returns registerKeyResponse.asSuccess()\n         coEvery {\n             accountsService.setPassword(body = setPasswordRequestJson)\n-        } returns Throwable(\"Fail\").asFailure()\n+        } returns error.asFailure()\n \n         val result = repository.setPassword(\n             organizationIdentifier = organizationId,\n@@ -4879,7 +4891,7 @@ class AuthRepositoryTest {\n             passwordHint = passwordHint,\n         )\n \n-        assertEquals(SetPasswordResult.Error, result)\n+        assertEquals(SetPasswordResult.Error(error = error), result)\n         fakeAuthDiskSource.assertMasterPasswordHash(userId = USER_ID_1, passwordHash = null)\n         fakeAuthDiskSource.assertPrivateKey(userId = USER_ID_1, privateKey = null)\n         fakeAuthDiskSource.assertUserKey(userId = USER_ID_1, userKey = null)\n@@ -5183,7 +5195,7 @@ class AuthRepositoryTest {\n             passwordHint = passwordHint,\n         )\n \n-        assertEquals(SetPasswordResult.Error, result)\n+        assertEquals(SetPasswordResult.Error(error = error), result)\n         fakeAuthDiskSource.assertMasterPasswordHash(userId = USER_ID_1, passwordHash = null)\n         fakeAuthDiskSource.assertPrivateKey(userId = USER_ID_1, privateKey = privateRsaKey)\n         fakeAuthDiskSource.assertUserKey(userId = USER_ID_1, userKey = encryptedUserKey)\n@@ -5237,19 +5249,18 @@ class AuthRepositoryTest {\n \n         val result = repository.passwordHintRequest(email)\n \n-        assertEquals(PasswordHintResult.Error(errorMessage), result)\n+        assertEquals(PasswordHintResult.Error(message = errorMessage, error = null), result)\n     }\n \n     @Test\n     fun `passwordHintRequest with failure should return Error with null message`() = runTest {\n         val email = \"failure@example.com\"\n-        coEvery {\n-            accountsService.requestPasswordHint(email)\n-        } returns RuntimeException(\"Network error\").asFailure()\n+        val error = RuntimeException(\"Network error\")\n+        coEvery { accountsService.requestPasswordHint(email) } returns error.asFailure()\n \n         val result = repository.passwordHintRequest(email)\n \n-        assertEquals(PasswordHintResult.Error(null), result)\n+        assertEquals(PasswordHintResult.Error(message = null, error = error), result)\n     }\n \n     @Test\ndiff --git a/app/src/test/java/com/x8bit/bitwarden/ui/auth/feature/completeregistration/CompleteRegistrationViewModelTest.kt b/app/src/test/java/com/x8bit/bitwarden/ui/auth/feature/completeregistration/CompleteRegistrationViewModelTest.kt\nindex 24ba610e6b0..82b351a771d 100644\n--- a/app/src/test/java/com/x8bit/bitwarden/ui/auth/feature/completeregistration/CompleteRegistrationViewModelTest.kt\n+++ b/app/src/test/java/com/x8bit/bitwarden/ui/auth/feature/completeregistration/CompleteRegistrationViewModelTest.kt\n@@ -127,7 +127,7 @@ class CompleteRegistrationViewModelTest : BaseViewModelTest() {\n         val input = \"abcdefghikl\"\n         coEvery {\n             mockAuthRepository.getPasswordStrength(EMAIL, input)\n-        } returns PasswordStrengthResult.Error\n+        } returns PasswordStrengthResult.Error(error = Throwable(\"Fail!\"))\n         val viewModel = createCompleteRegistrationViewModel()\n         viewModel.trySendAction(PasswordInputChange(input))\n \n@@ -138,7 +138,7 @@ class CompleteRegistrationViewModelTest : BaseViewModelTest() {\n     fun `Passwords not matching should have non-valid state`() = runTest {\n         coEvery {\n             mockAuthRepository.getPasswordStrength(EMAIL, PASSWORD)\n-        } returns PasswordStrengthResult.Error\n+        } returns PasswordStrengthResult.Error(error = Throwable(\"Fail!\"))\n         val viewModel = createCompleteRegistrationViewModel()\n         viewModel.trySendAction(PasswordInputChange(PASSWORD))\n \n@@ -448,7 +448,7 @@ class CompleteRegistrationViewModelTest : BaseViewModelTest() {\n     fun `PasswordInputChange update passwordInput and call getPasswordStrength`() = runTest {\n         coEvery {\n             mockAuthRepository.getPasswordStrength(EMAIL, PASSWORD)\n-        } returns PasswordStrengthResult.Error\n+        } returns PasswordStrengthResult.Error(error = Throwable(\"Fail!\"))\n         val viewModel = createCompleteRegistrationViewModel()\n         viewModel.trySendAction(PasswordInputChange(PASSWORD))\n         viewModel.stateFlow.test {\n@@ -483,7 +483,7 @@ class CompleteRegistrationViewModelTest : BaseViewModelTest() {\n         runTest {\n             coEvery {\n                 mockAuthRepository.getPasswordStrength(EMAIL, PASSWORD)\n-            } returns PasswordStrengthResult.Error\n+            } returns PasswordStrengthResult.Error(error = Throwable(\"Fail!\"))\n             val viewModel = createCompleteRegistrationViewModel()\n             mutableGeneratorResultFlow.emit(GeneratorResult.Password(PASSWORD))\n             viewModel.stateFlow.test {\n@@ -602,7 +602,7 @@ class CompleteRegistrationViewModelTest : BaseViewModelTest() {\n             val input = \"abcdefghikl\"\n             coEvery {\n                 mockAuthRepository.getPasswordStrength(EMAIL, input)\n-            } returns PasswordStrengthResult.Error\n+            } returns PasswordStrengthResult.Error(error = Throwable(\"Fail!\"))\n             val viewModel = createCompleteRegistrationViewModel()\n             viewModel.trySendAction(PasswordInputChange(input))\n             val expectedState = DEFAULT_STATE.copy(\n@@ -623,7 +623,7 @@ class CompleteRegistrationViewModelTest : BaseViewModelTest() {\n         runTest {\n             coEvery {\n                 mockAuthRepository.getPasswordStrength(EMAIL, PASSWORD)\n-            } returns PasswordStrengthResult.Error\n+            } returns PasswordStrengthResult.Error(error = Throwable(\"Fail!\"))\n             val viewModel = createCompleteRegistrationViewModel()\n             viewModel.trySendAction(PasswordInputChange(PASSWORD))\n             val expectedState = DEFAULT_STATE.copy(\n@@ -644,7 +644,7 @@ class CompleteRegistrationViewModelTest : BaseViewModelTest() {\n     fun `CreateAccountClick with no email not should show dialog`() = runTest {\n         coEvery {\n             mockAuthRepository.getPasswordStrength(\"\", PASSWORD)\n-        } returns PasswordStrengthResult.Error\n+        } returns PasswordStrengthResult.Error(error = Throwable(\"Fail!\"))\n         val viewModel = createCompleteRegistrationViewModel(\n             DEFAULT_STATE.copy(userEmail = \"\"),\n         )\ndiff --git a/app/src/test/java/com/x8bit/bitwarden/ui/auth/feature/createaccount/CreateAccountViewModelTest.kt b/app/src/test/java/com/x8bit/bitwarden/ui/auth/feature/createaccount/CreateAccountViewModelTest.kt\nindex c4035ea9f9c..b3739c80997 100644\n--- a/app/src/test/java/com/x8bit/bitwarden/ui/auth/feature/createaccount/CreateAccountViewModelTest.kt\n+++ b/app/src/test/java/com/x8bit/bitwarden/ui/auth/feature/createaccount/CreateAccountViewModelTest.kt\n@@ -137,7 +137,7 @@ class CreateAccountViewModelTest : BaseViewModelTest() {\n         val input = \"abcdefghikl\"\n         coEvery {\n             mockAuthRepository.getPasswordStrength(\"test@test.com\", input)\n-        } returns PasswordStrengthResult.Error\n+        } returns PasswordStrengthResult.Error(error = Throwable(\"Fail!\"))\n         val viewModel = CreateAccountViewModel(\n             savedStateHandle = SavedStateHandle(),\n             authRepository = mockAuthRepository,\n@@ -163,7 +163,7 @@ class CreateAccountViewModelTest : BaseViewModelTest() {\n         val input = \"testtesttesttest\"\n         coEvery {\n             mockAuthRepository.getPasswordStrength(\"test@test.com\", input)\n-        } returns PasswordStrengthResult.Error\n+        } returns PasswordStrengthResult.Error(error = Throwable(\"Fail!\"))\n         val viewModel = CreateAccountViewModel(\n             savedStateHandle = SavedStateHandle(),\n             authRepository = mockAuthRepository,\n@@ -189,7 +189,7 @@ class CreateAccountViewModelTest : BaseViewModelTest() {\n         val password = \"testtesttesttest\"\n         coEvery {\n             mockAuthRepository.getPasswordStrength(\"test@test.com\", password)\n-        } returns PasswordStrengthResult.Error\n+        } returns PasswordStrengthResult.Error(error = Throwable(\"Fail!\"))\n         val viewModel = CreateAccountViewModel(\n             savedStateHandle = SavedStateHandle(),\n             authRepository = mockAuthRepository,\n@@ -569,7 +569,7 @@ class CreateAccountViewModelTest : BaseViewModelTest() {\n     fun `PasswordInputChange update passwordInput and call getPasswordStrength`() = runTest {\n         coEvery {\n             mockAuthRepository.getPasswordStrength(\"\", \"input\")\n-        } returns PasswordStrengthResult.Error\n+        } returns PasswordStrengthResult.Error(error = Throwable(\"Fail!\"))\n         val viewModel = CreateAccountViewModel(\n             savedStateHandle = SavedStateHandle(),\n             authRepository = mockAuthRepository,\ndiff --git a/app/src/test/java/com/x8bit/bitwarden/ui/auth/feature/removepassword/RemovePasswordViewModelTest.kt b/app/src/test/java/com/x8bit/bitwarden/ui/auth/feature/removepassword/RemovePasswordViewModelTest.kt\nindex 4a1657070a8..250ba1cf801 100644\n--- a/app/src/test/java/com/x8bit/bitwarden/ui/auth/feature/removepassword/RemovePasswordViewModelTest.kt\n+++ b/app/src/test/java/com/x8bit/bitwarden/ui/auth/feature/removepassword/RemovePasswordViewModelTest.kt\n@@ -46,11 +46,12 @@ class RemovePasswordViewModelTest : BaseViewModelTest() {\n     @Test\n     fun `ContinueClick with input and remove password error should show error dialog`() = runTest {\n         val password = \"123\"\n+        val error = Throwable(\"Fail!\")\n         val initialState = DEFAULT_STATE.copy(input = password)\n         val viewModel = createViewModel(state = initialState)\n         coEvery {\n             authRepository.removePassword(masterPassword = password)\n-        } returns RemovePasswordResult.Error\n+        } returns RemovePasswordResult.Error(error = error)\n \n         viewModel.stateFlow.test {\n             assertEquals(initialState, awaitItem())\n@@ -68,6 +69,7 @@ class RemovePasswordViewModelTest : BaseViewModelTest() {\n                     dialogState = RemovePasswordState.DialogState.Error(\n                         title = R.string.an_error_has_occurred.asText(),\n                         message = R.string.generic_error_message.asText(),\n+                        error = error,\n                     ),\n                 ),\n                 awaitItem(),\n", "problem_statement": "PM-19295: Propagate password errors to the UI\n## Objective\nThis PR propagates the password errors to the UI.", "hints_text": "", "created_at": "2025-03-17T20:28:30Z"}
